

## SMOTE used

import numpy as np
import pandas as pd
from datetime import datetime
import warnings
warnings.filterwarnings("ignore")
import os

pd.options.mode.chained_assignment = None

os.chdir(r'D:\personal data\quaero')

p_train = pd.read_csv("puzzle/puzzle_train_dataset.csv")
p_test = pd.read_csv("puzzle/puzzle_test_dataset.csv")
p_big = pd.read_csv("puzzle/big_case_train.csv")

train_des = p_train.describe()
p_train.groupby(['default']).count()
p_train.columns

p_train_cat = p_train.describe(include= ['O'])

p_train = p_train.drop(['default'], axis = 1)
p_train_original = pd.read_csv("puzzle/puzzle_train_dataset.csv")
p_data = pd.concat([p_train, p_test])
#p_train[['', 'Survived']].groupby(['Pclass'], as_index = False).count().sort_values(by = 'Survived',ascending = False)

#df = p_train.convert_objects(convert_numeric=True)

p_train['last_payment'] = pd.to_datetime(p_train['last_payment'], format='%d-%m-%Y')
p_train['end_last_loan'] = pd.to_datetime(p_train['end_last_loan'], format='%d-%m-%Y')

p_train['last_payment'] = pd.to_datetime(p_train['last_payment'], format='%d-%m-%Y')
p_train['end_last_loan'] = pd.to_datetime(p_train['end_last_loan'], format='%d-%m-%Y')


p_test['last_payment'] = pd.to_datetime(p_test['last_payment'], format='%d-%m-%Y')
p_test['end_last_loan'] = pd.to_datetime(p_test['end_last_loan'], format='%d-%m-%Y')

p_test['last_payment'] = pd.to_datetime(p_test['last_payment'], format='%d-%m-%Y')
p_test['end_last_loan'] = pd.to_datetime(p_test['end_last_loan'], format='%d-%m-%Y')


x=p_train_original.groupby(['score_1', 'default'], as_index = False).count().sort_values(by = 'default',ascending = False)


p_train['score_2'].dtypes


p_train[['last_payment','end_last_loan']].max()

max_date = '2017-03-01'
max_date1 = datetime.strptime(max_date, '%Y-%m-%d')
p_train['last_payment_derived'] = max_date1 - p_train['last_payment']
p_train['end_last_loan_derived'] = max_date1 - p_train['end_last_loan']


p_test[['last_payment','end_last_loan']].max()  #CHANGED

max_date_ = '2017-03-01'
max_date1_ = datetime.strptime(max_date_, '%Y-%m-%d')
p_test['last_payment_derived'] = max_date1_ - p_test['last_payment']
p_test['end_last_loan_derived'] = max_date1_ - p_test['end_last_loan']


#if p_train['score_1'] == '1Rk8w4Ucd5yR3KcqZzLdow==' then :
    
score1_mapping = {'1Rk8w4Ucd5yR3KcqZzLdow==' :0.181242847, '4DLlLW62jReXaqbPaHp1vQ==': 0.057385559, '8k8UDR4Yx0qasAjkGrUZLw==': 0.232344633, 'DGCQep2AE5QRkNCshIAlFQ==': 0.116871705, 'e4NYDor1NOw6XKGE60AWFw==': 0.301747679, 'fyrlulOiZ+5hoFqLa6UbDQ==': 0.398826979 , 'smzX0nxh5QlePvtVf6EAeg==': 0.391530945}   

p_train_test_list = [p_train, p_test]  #CHANGED

for dataset in p_train_test_list:
    dataset['score_1'] = dataset['score_1'].map(score1_mapping)
    #dataset['score_1'] = dataset['score_1'].fillna(0)



score2_mapping = {'/tdlnWjXoZ3OjdtBXzdOJQ==':0.14932001110186,
'+2hzpeP1RWr8PEvL1WTUdw==':0.352272727272727,
'+CxEO4w7jv3QPI/BQbyqAA==':0.255767963085036,
'5/uMrqKj3OL/Xk5OrGx9fg==':0.470588235294118,
'55UK234RR1d7HIWJjmq9tw==':0.380952380952381,
'6J1ZMTzN5GKHXnhM4J1JbA==':0.421383647798742,
'7h+tk4z7O9brtBSe1rNjxA==':0.144166157605376,
'7h8PTkrlTWUPP3yuyP4rUg==':0.0515184381778742,
'A+QuW1n/ABeiVVe/9CRZ9Q==':0.333333333333333,
'bopP0NxW3+r8tn9xIHTaOw==':0.387580299785867,
'cdpgyOyZS04uXerMNu7uCw==':0.324200913242009,
'd/7Hedyz7ovK9Pn1CYN4+A==':0.201117318435754,
'dCm9hFKfdRm7ej3jW+gyxw==':0.214987714987715,
'dWJRASUFMejk3AHZ1p1Gkg==':0.297297297297297,
'emS9xH8CLoRNie2uSmaDAQ==':0.0294924554183813,
'Fv28Bz0YRTVAT5kl1bAV6g==':0.0926093514328808,
'IOVu8au3ISbo6+zmfnYwMg==':0.186271127975164,
'ky19q4V1ZqgL3jnHX0wKDw==':0.301310043668122,
'LCak332j+TYFqHC3NDwiqg==':0.218608169440242,
'mX2VRRG38RPiHX+MfjefRw==':0.265772870662461,
'NLvAOzzmJba/0zolQnWF5Q==':0.290322580645161,
'O4i7FxcROACMVTCgI0WXuA==':0.394618834080717,
'OlDYtdljgSSYM/M1L2CRaQ==':0.224842767295597,
'osCzpM4hJrxugqWWuZmMWw==':0.113879003558719,
'pAzpxkhjPsjWldgSX21+zg==':0.0743128605361384,
'rJZgTmANW3PjOCQLCcp4iQ==':0.156508422664625,
'RO7MTL+j4PH2gNzbhNTq/A==':0.0991225990040313,
'SaamrHMo23l/3TwXOWgVzw==':0.134415584415584,
'tHpS8e9F8d9zg3iOQM9tsA==':0.383522727272727,
'tQUTfUyeuGkhRotd+6WjVg==':0.065345080763583,
'vJyc9xom9v7hwFMPTIpmKw==':0.389221556886228,
'w1miZqhB5+RSamEQJa0rqg==':0.270538243626062,
'wjdj2vxjWoDsEIk0l09ynw==':0.455882352941176,
'wkeCdGeu5sEv4/fjwR0aDg==':0.234441087613293,
'YLGMUI9hObSh6wD/xfanGg==':0.0450061652281134
}

for dataset in p_train_test_list:
    dataset['score_2'] = dataset['score_2'].map(score2_mapping)
    #dataset['score_2'] = dataset['score_2'].fillna(0)
    
#p_train_1 = p_train_list[0]
    
    
sign_mapping = {'aqua':0.159210989785136,
'arie':0.157963875205255,
'cance':0.0857245984479336,
'capr':0.171399594320487,
'gemi':0.283223778222349,
'leo':0.270601653835187,
'libr':0.0827660336796847,
'pisce':0.160762032085562,
'sagi':0.646219686162625,
'scor':0.153671950824976,
'taur':0.477522477522478,
'virg':0.0840064620355412
}

for dataset in p_train_test_list:
    dataset['sign'] = dataset['sign'].map(sign_mapping)
    #dataset['sign'] = dataset['sign'].fillna(0)
    

    #------------------------------------------------ ipython_1

gender_mapping = {'f':0.186650787636009,
'm':0.144530742655272
}

for dataset in p_train_test_list:
    dataset['gender'] = dataset['gender'].map(gender_mapping)
    #dataset['gender'] = dataset['gender'].fillna(0)
    

fb_mapping = {'FALSE':0.113510015589611,
'TRUE':0.235223522352235}

for dataset in p_train_test_list:
    dataset['facebook_profile'] = dataset['facebook_profile'].map(fb_mapping)
    #dataset['facebook_profile'] = dataset['facebook_profile'].fillna(0)

state_mapping = {'/+QaZYcpPt5mXLpkv6I8Bw==':0.113074204946996,
'/78Q+NAqnsdbiE2JReYK9Q==':0.179439252336449,
'/EoxQEzy1PWWTtv6DNwr2w==':0.153790087463557,
'/L8vvVesB5WyAv190Hw/rQ==':0.153164556962025,
'0gQEZgRHqS5KSF3oWQrQfw==':0.169014084507042,
'0lQuvmygO68ZFXZjzHEOww==':0.17159383033419,
'1DpYl6dtzY0qE33poow3iw==':0.175740210124164,
'1tPrGp5Yx4Yev8EWxfJw2w==':0,
'1vMmtGURgMcjxQbV2KQiUw==':0.173851590106007,
'1xxlFOWSFxK0/J2VdCKP3g==':0.158234660925727,
'5hPtRY8gW/3+fPXvGIgWTg==':0.145030425963489,
'7bX4XFXmYqoMspxup0CrKA==':0.163916977115487,
'82aTqSzrTImY+SbAOBQzGQ==':0.157327586206897,
'8ZKN5LHxobLWh6drCDlmhQ==':0.175342465753425,
'9PWmQ/Uv20r8XvcwDXWUSw==':0,
'9sS116y/1CqWLVJ8nFOGZg==':0.113553113553114,
'BB/zpwTH+8GCIVHlhzOU1Q==':0.171637591446258,
'bNDXnbe7XAx/VUe+cbjDiw==':0.131028938906752,
'bwNrC22VlFOFk6/nEHQc6A==':0.155555555555556,
'cd+7k16vaf6SzwSyvT/fHw==':0.141414141414141,
'DLK5rpOxZhCM5oQvfUpkTQ==':1,
'E8shyM/6btBNXXExsO17zw==':0.164609053497942,
'fMOpZ7DFhwQgTxW547UMCQ==':0.178451178451178,
'fR2lwAMjCb/fNXjsApiOTw==':0.14665708123652,
'GFOaXqGcKJxSSF9aBDDNaA==':0.333333333333333,
'GW2VZ3dN3OGHSjQ6JkfqQw==':0.151624548736462,
'Jc0dzuliQSKFl0Xy0bjYCQ==':0,
'JrdZzPZEa/YIIGwh8OdTKA==':0.161259079903148,
'KET/Pmr6rHp1RJ/P9ymztw==':0.127300613496933,
'kfFcVGcsJmH2n3eYprLkeQ==':0.146919431279621,
'LXZkF0tV1Ma9JIlIvaUDiw==':0.15929203539823,
'NX0S6z5x5fEStwXfBQN5FQ==':0.17037037037037,
'OCoEDgPLpDjHcbEmPpAjvA==':0.18659217877095,
'orU7WJYGPT/xFwOXY1eBkw==':0.132462686567164,
'P1TKs1aii8osbgO+MszZ2w==':0.173469387755102,
'QCVqG0wT4xPLQuiTIExO2w==':0.2,
'qItmSqWrjm+MopDA+UpKRw==':0.198290598290598,
'QMl/wADluYmoYZIXDOUktQ==':0.100961538461538,
'rrVbgRNTRyB6auEycsRrpA==':0.181883537023724,
'sjJbkqJS7cXalHLBFA+EOQ==':0.135615829257448,
'TYC58USu+Tq7c/WS4YLnuQ==':0.152173913043478,
'umkEte5GXWggFkMOtKQ3Ug==':0.130177514792899,
'VafbDA6D5W2TpGMAUJbW8Q==':0.153306613226453,
'x6Gw/1I8t3KPgT6s82Kodg==':0.174292845257904,
'xsd3ZdsI3356I3xMxZeiqQ==':0.152565609087348,
'ygE7OTdsxRMLeXMa0EZwZw==':0.160056657223796,
'Ygq6MsM98oC8yceExr69Ig==':0.149440421329822,
'yni6lL4oSly97UVZeRSyxA==':0.0676691729323308,
'ZUmHOp1/xBWh5O/uqDutsw==':0.152818991097923,
'ZVfsutsd1Go0zZEnGp0vEA==':0.18200408997955,
}

for dataset in p_train_test_list:
    dataset['state'] = dataset['state'].map(state_mapping)
    #dataset['state'] = dataset['state'].fillna(0)


zip_mapping = {'/+82UC3tzFrNWWenFmhJGg==':0.169398907103825,
'/+hsvyYgEcx6yBpOLHLYdQ==':0.148936170212766,
'/20O+JvpAAT+curAPU8hlg==':0.222222222222222,
'/3WrV3grJm2yenFltR809A==':0.25,
'/BcmWv1Z2COiAR4HeKGXmg==':0,
'/BmGjPvqp4Oi7sGm1DOvBQ==':0.115384615384615,
'/I20kRAs16nxGt5kML+syA==':0.133333333333333,
'/OAqyXxT81EswOTDgrH2pA==':0,
'/RJRedDhMzXbInYa9yXxfQ==':0.174757281553398,
'/SQ4IBopbUIp8IFrlxA4Cg==':0,
'/U4pi6HAXn1ay2xUDVf0Dw==':0.258064516129032,
'/V6UxFTnY2XT8JoKjpdriw==':0.112903225806452,
'/xvdpwOs4hXJi0GDKVxkuQ==':0.1,
'/zu3FctLde3HQ34GVueoKQ==':0.25,
'+4rEFEGDhDgDdf70zzeINg==':0,
'+5JRkVMaa+QPZvy7Thet/w==':0.181818181818182,
'+812F9gCHpqgp32MvRWhcw==':0.13953488372093,
'+jJ2yLBa+8KLlE75KYYFeA==':0.087719298245614,
'+mcY7aQt74IFJfwQBeZkmw==':0.0769230769230769,
'+msz0x62+fQ7qb4rvVUvhw==':0.153846153846154,
'+Nwrx78jFoSLPuMxtyBStA==':0.116071428571429,
'+PI93HeWnvVZysZn+mmjrQ==':0.307692307692308,
'+siDCBQhXSoTAuySdMk/TA==':0.2,
'+SS6hjDwJ2sxbGOQn42TIQ==':0.222222222222222,
'+U/YVQV9PEnOBDWQROFLFQ==':0.166666666666667,
'0+cnUhDuVL0G3xRv63guSA==':0,
'08P/ZYuQQXYpYDTATV4Kpg==':0.156862745098039,
'0AltMpQyHxLyIHOPgrVI9g==':0.6,
'0L+KVYUnFBjMZgMR7XDdbg==':0.380952380952381,
'16hMKbGghaKse7BwcOazmQ==':0.156424581005587,
'1dJob5bLlaGvhncvJTJdyg==':0.1,
'1dy0okVzi58Qcd4zQCfOYw==':0.272727272727273,
'1j7vrNP71ugoxMp3ajy+gA==':0.17,
'1K3HHDCYZu5N/iS0Ek8c4g==':0.153846153846154,
'1kpZTkvYPSA2xUnaTJu+0A==':0.194444444444444,
'1ltBsW/Pkd3i6InIaODvnQ==':0.0714285714285714,
'1MrqszVl7FBt9nzjFgZdzg==':0.110091743119266,
'1ONPxME4Rj+hLUS2kAXqTA==':0.176470588235294,
'1orCzwhkASa7a2oGixTCKA==':0.0984848484848485,
'216ci821KekeN8Xz+3Dccw==':0.163076923076923,
'248/dJV3JuaEyQdjWTSkAA==':0.117647058823529,
'24Pr4iVH/5ROZxL900G6Nw==':0.122448979591837,
'24qIUBgtWj/Lv71LdGn6YA==':0.05,
'26I3fMuT9ivLIx+jg15IHg==':0.15625,
'27DtYF3F+XRgnXqsIGlx/A==':0.180851063829787,
'29exRAe3g90Gf4NZ0PziuA==':0,
'2awCVJx4VwcYe+UDRJ5SUQ==':0.0714285714285714,
'2BqJJo5G6LQLE5sn83Xkrw==':0.13953488372093,
'2DSuBjXdUlGB/4g8AuivWg==':0.117647058823529,
'2EAz2Vbusa/5XVbe9mwhfA==':0.0625,
'2FDPevvYd4kZgZ6L5QaJCw==':0.290322580645161,
'2i/mQKPVem4ze0OfOJa1dw==':0.0714285714285714,
'2lsMiZam6G94b5ztIpxWxg==':0.34375,
'2mDlQVNWa+rHgPIVPN5GMQ==':0.138888888888889,
'2r3GvTbJ5luqHFLW9sFy2g==':0.111111111111111,
'2S9g6oQaJwfzP2kVzaerOQ==':0.150943396226415,
'2uwC99i4lnT682R9g/edow==':0.254545454545455,
'2VYdrV7ppg29D3nrgrvsZQ==':0.138766519823789,
'2X3gWL3LYEcpynbkHtZZkA==':0.209876543209877,
'2zaCVj0D3dN5tgLHF4se8w==':0.2,
'2zfOMQTR02CFPgAjMRARyg==':0.145454545454545,
'33J7s0tS8N4AjOK+2t3OvA==':0.164948453608247,
'37zqKLsALF+XRNe4I/lf7A==':0.201388888888889,
'38M0CPNDWVamGIIjVLmBEA==':0.145833333333333,
'3A6OGi6mTO+FlNXAgDtsHw==':0.243243243243243,
'3HARiSvhVy+TLBrnuqawXQ==':0.0588235294117647,
'3k2JCQ8Bp5oDwaI39ZJgHA==':0.141935483870968,
'3lz91hMJHCqjIQfwim8i6A==':0.217391304347826,
'3mgDW/PWMIpwQ6lj/fgBDw==':0.2,
'3nKXzV559iDmMWkRWP+s8g==':0.133333333333333,
'3ny5YG7iQKXBVBOsZpre6g==':0.117647058823529,
'3qxI+iyHVvFUYHBNKNj5sw==':0.233333333333333,
'3R9/tJJh9Mu2lyy6X15WYw==':0,
'3SnQXYBQPa6p8NHZi6xGeQ==':0,
'3T66Ux0ltuPDjWgAHqL1sQ==':0.307692307692308,
'3tffY73ko3vuVR6v4SzeiA==':0.173913043478261,
'3VSg2ooLkPrr0lpEe5XFNg==':0.111111111111111,
'3XDcJSoiefXBu7pL/l7hHQ==':0.2,
'41lqnIV57y91jnsFXYMeXw==':0,
'41Mbq6IhIBKzrY6Bp9RLKQ==':0.0857142857142857,
'4DrcKDSFz+NeHOQlzKDVPg==':0.272727272727273,
'4Hmfy977853uyP1D2rxg0A==':0.148148148148148,
'4iCzrkyjf0D2vo6vycdD3w==':0.25,
'4iUcM7G5xeN5RKCmjx835w==':0.168539325842697,
'4MyOmrY9hkjRl6nKfPt+pQ==':0.0930232558139535,
'4SehRyDLf04wMWM0Qz30ug==':0.191489361702128,
'4UkFK78e10P483RunaoIWA==':0.16,
'4Xc0HWmYPu0Bk2w7B6sJ8A==':0.25,
'5+hFO+Ijqlyd0EWKBL3fjQ==':0.157894736842105,
'5+tW4thxY2CMeaSg67vwrQ==':0,
'57DdOlVJNHJJSRdRhmGi8w==':0.238095238095238,
'57mf//7xCyqfM003gkvxoQ==':0.185185185185185,
'58TEJe+glBfijOvZOYny2A==':0.116161616161616,
'5c9lnz/Bvc6+0siJBLMnDA==':0.5,
'5cXFcE6XcD2ni4MJe1CBvQ==':0.227272727272727,
'5IJLY0K5n4/sMYhzgnP4UQ==':0.4,
'5ikxpiNRqPTfvrYeCZ854g==':0.1875,
'5lnJJIdAlDAl8wWoJumhpA==':0.25,
'5lyKpBBL/TVC4OeZm20vVw==':0.15,
'5o/M+OiEeer/s+YuEX9h5w==':0.102564102564103,
'5Op7K6Kc9uCKapO1/7pRrw==':0.126126126126126,
'5rWaR+Ym3afbYYGiZmpNhQ==':0.0909090909090909,
'5tkiNzG2rQLNQAQkSUHQzg==':0.277777777777778,
'5X9E1DEOJ75w50lozH2vEA==':0.153846153846154,
'60qIAo4kl/PpwlO7MgkJHQ==':0.142857142857143,
'63VvFFVkkOOSC8TnJZXjxg==':0.333333333333333,
'65PhtfOGx3+XWaW9uzPS0g==':0,
'6ed9f7AFad3DQhc3r1jJXA==':0.137254901960784,
'6eUg/ZbdMcOTmeFvZrNuSg==':0.116666666666667,
'6g+0e0MlZUpkFeW+7b0aTA==':0.1,
'6j2lLWttdlqtebUWnDxakQ==':0,
'6lfg5mHdmRJvgkB5FXle8w==':1,
'6NRwwvQMsUd4/Peh/pUdLQ==':0.143396226415094,
'6t245g67VyNGwLb906g6uw==':0,
'6whtNflYvJaZ3X9vrD+jBQ==':0.11231884057971,
'79wZNOw/HPnqHP2Ceu9sEg==':0.185185185185185,
'7BAMPpenmBdcygnhKsuQaQ==':0.162995594713656,
'7DmwW1Dnt6qVcmhImHoLDg==':0.1,
'7FvbyxtjUWNKJuJxFOj4rQ==':0.142857142857143,
'7KDERTeY8RHkxv5GbLSCQw==':0,
'7KHs6CkQr6vDFrFFYf+Kkw==':0.25,
'7KpfaC1u5GeBBntfEXD9hQ==':0.147368421052632,
'7lky2z1BOidUT653hrU3mw==':0.148760330578512,
'7qA6KLGPsqjnQFQO70criQ==':0,
'7tc2gNFS6XGy8dvqFmgirA==':0.155555555555556,
'7Tjbih7nMaMmKeL88iUaJQ==':0.137254901960784,
'7uTNf2vzbusmA1XBuJVA0w==':0.105263157894737,
'7vC150QDqbqnMaYjz/gAAA==':0.1671826625387,
'7xo+RGiCjMuXddILeqX3cQ==':0.25,
'886qU4ALtTVHJHC/UTfedg==':0.175824175824176,
'89FCgsLX/qKUmSnkCIiLcA==':0.2,
'8cAJEUm+49qAb3w+rWMCWg==':0.0645161290322581,
'8CzEMx9+pHRt9XLEk+EToA==':0.2,
'8eSVoW7mQvLn8LuCkVkKnA==':0.08,
'8FSxDEm1gaNe9JP9AmF51Q==':0.180555555555556,
'8fTg1YyyuslJ5OATAWj5Ww==':0.176829268292683,
'8kKEUbrNcTOwdOezkzgIWQ==':0.2,
'8q/sDjjHZhPYznMg7nsWxQ==':0.116279069767442,
'8qgxecfbVQrBbH6hc6MigQ==':0.225108225108225,
'8QrjzRatRezSXBZShgYMzQ==':0.145454545454545,
'8REhu8TWlarYwZKjbn1BNA==':0.164739884393064,
'8rsd43zXvPCTsDgH//Uqsg==':0.144385026737968,
'8tqaCTxxFlm+Dwqgzf0gsg==':0.136363636363636,
'8VPDZgRY3AgAXQ3blkhLcQ==':0.0892857142857143,
'8wwc+8Xrc6P/no2bL+R+YQ==':0.0833333333333333,
'8xqYJQoSmGm8xlrrJlAY5Q==':0,
'8yxnVuITOvMmNk5fXh95Ew==':0.5,
'94m/j44RrokkTbfgn2LTiw==':0.272727272727273,
'9d7BQ8GEM42Ph6cyQIgvgA==':0.174657534246575,
'9gp0fnL6h3bVx+TPcvSK+g==':0.197478991596639,
'9iz9ehF2IMelI9SkfDHIwg==':0.19047619047619,
'9JSoSJU2OmI5iYsvA4UZDw==':0.3,
'9rxXn1U6RXAqIRrkm7FB2g==':0.192307692307692,
'9sWGNVZSLMWwTTdSE3ljoA==':0.307692307692308,
'9w4vei8Dq2QJ9W632DZ0OA==':0.111111111111111,
'9wb/iYvS7yuhAj+6jYv7wA==':0.11522633744856,
'9wYeCPtZgGbUhQmbbjUA5Q==':0.238095238095238,
'9XPFTSyICXj+vyDZF1v20w==':0.166666666666667,
'A0BH7Nu41Izwkp/1abkCFw==':0.166666666666667,
'a3Del81mQ7pxZ5ZC6C6w1g==':0.0666666666666667,
'a6D1E21kzn72Ce+5Iylt/g==':0.142857142857143,
'A8Ltq8Y5DaZEAkHmXcZkgQ==':0.222222222222222,
'a9DKsF4Pv3GTb0o1DclItA==':0.147286821705426,
'aACQ6YXFANk/0pi+eHcQgg==':0.11,
'AaV2LVPo+3SidwzQ4UCi7A==':0.310344827586207,
'ACXb42WIY3t2lkzr8dpPRw==':0.127272727272727,
'aDarQFrGMNcHQmIg4vOZCg==':0.178571428571429,
'aEQ6LUsNJZTE3G87d5wOxA==':0.27027027027027,
'AFyoVUbQuE8MuiwGEUUFAg==':0.0588235294117647,
'Aj88y+jS6QtqPAJYW+hSJw==':0.136,
'al1q2oDfNCxN3l3SKnXxGw==':0.111111111111111,
'AmEknQxTZeWSky1ZhsNv+w==':0.0416666666666667,
'ap0+SDtWtPxkoUtdv9Jixw==':0.198198198198198,
'aq62v2ctSeDofqdVkfOy6g==':0.224489795918367,
'AqRxCKADTK3IsA5YCYwHAA==':0.2125,
'At+tZHbp9UVvvzPcIZNRrA==':0.209302325581395,
'Atm4KTWJxDUAVj4xI3Huuw==':0.173076923076923,
'aWYdoIob9g+ymOC/8+SoDw==':0.25,
'ayEGfJHwH6ea32IylKMf6g==':0.219512195121951,
'azbiQn9l6xSos7ZkDrIw4g==':0.178947368421053,
'b7qHT8nJ/qGL/6mHMad3gA==':0.230769230769231,
'bAUhaBCJ3bultZG+IW5kzg==':0.137931034482759,
'BCLdJjhzhj+Jn5yb8Ps/LA==':0.139240506329114,
'bEl+LqEhi0l9CII7dkx13g==':0.158415841584158,
'bfgG3hXMqy+Feuwux/Az9w==':0.116666666666667,
'bfRuu0C42TOiejHKTj7Dwg==':0.179487179487179,
'bIiX6iBJmJaryIsko7TP0Q==':0.0588235294117647,
'BiSJlyDRUwgh55T7PqPxHg==':0.25,
'BKgW/NVZiLq6JCKTWho1FQ==':0.1625,
'BKY6KI6JGnl0Y23v0kD0jw==':0.141176470588235,
'BMIK35trMYhh9yVrcGg/oQ==':0.131313131313131,
'bn48V83pGJan0ATMjY73bw==':0.189655172413793,
'bnMqM8ymFg0RVFk5yDBOxA==':0.17741935483871,
'BO0uc8U7K+49hTbBCglc0Q==':0.333333333333333,
'boS02CHEWxr4jb/f4rqWyw==':0.2,
'BrVOPW947KdiyhwVQJrJEg==':0,
'bTJ1dQg9QnMHF6ELIN92BQ==':0.0588235294117647,
'Bug5tEWrFcD7KxW1X9fWVA==':0.117647058823529,
'Bw9jHYP/0iKhHcvPTscOfQ==':0.0909090909090909,
'BWohKsHn8uJl/BESmD0ifw==':0.125,
'BXCbDGUMBCLbNqUzkizW+A==':0.333333333333333,
'C/Ec1d03Rovyo6lnpp3HGQ==':0,
'c2LhpbHuVwOyyI0aFi6rFw==':0.212121212121212,
'c3I8bxaSxPMvDGqgNRcORw==':0.25,
'CbU4MXL4G0e20HaF8wDSqA==':0.123076923076923,
'Cc/kWDLQH3dpHv5HU+pLVA==':0.120567375886525,
'ceNlmpI8ZLlwn9L3DMcBLQ==':0.102439024390244,
'cLXzGTeZL5vBdQfHQ1MHtw==':0.111111111111111,
'CMIPCWYL3eJN0+Jn7EU/Sg==':0.160714285714286,
'cmR+QHe0U2tDxxBbBfY7rQ==':0.205882352941176,
'coa2oOrpjxnQl4iyM7dTpQ==':0.225352112676056,
'coI8E1F385iWOIL8VA/cjA==':0.233333333333333,
'cOlQU7xnyANMq0NEa4AoiA==':0.229166666666667,
'COUNuf+T1ZD/6aBdCGCy4Q==':0.157894736842105,
'Cqhlkn/Nod3Ul1IXO3BUPQ==':0.212121212121212,
'cQzTAJwzkL+zewAWhPGOnQ==':0.142857142857143,
'crSF2/C+iqyYbCx/gl+TRg==':0.127572016460905,
'Ct6bsa/fNtYGJTNxluEWAA==':0.222222222222222,
'CTEHdHT0J++YSgyNEfb5NQ==':0.142857142857143,
'CwdeaPUeIDjVl8U9GhE1cw==':0.171641791044776,
'cxHIHuOWJ6h0FPkj+MoFDw==':0,
'CXnd7kLmAIskhf0hrzv+cA==':0.2,
'cy2GQZhD2TA3Y16zzrX4qQ==':0.111111111111111,
'D0pK27a/7UB+3Q7/P5vAlQ==':0.111111111111111,
'd0SfbhwdsF4fC0ZacLza4A==':0.186813186813187,
'd2B43dD64mgjHigz4sJo3g==':0.169014084507042,
'd80aCF22S8HaeRK2PKzYVA==':0.0625,
'dabgINfWaCdDxIzrx1iYOw==':0.173913043478261,
'ddJUz1PfHBtfm4rchOS/7w==':0,
'DEE/j9lDU3YiLYG8ODNq5Q==':0,
'df8u7emEvAOnfgcxPLohcA==':0,
'dfd/bOilx2AC29dJ864tHQ==':0.222222222222222,
'dFpEMDPOlSZ8KMc7ZViSrg==':0.153061224489796,
'DJ2BpyAOPo4ZUKnTVV77Iw==':0.222222222222222,
'DMzWt3PnB98gXbQ0US/kIg==':0.235294117647059,
'dn/yRnuIHk5BxxnvWdfM0g==':0.121951219512195,
'dNSI+Dduv0H7gGnqOvJ4xw==':0.161111111111111,
'DO36KxWhvaaHDQhfpVBAxQ==':0,
'dpmI2ofUItwOrV2VNwIfsA==':0.145454545454545,
'DvUcsxIqhGPu+bzXCF540w==':0,
'DxLs/hh7bgVlwlpLJPqOJg==':0.0888888888888889,
'dXW8+lcQY4agNwsnwO7VVA==':0.172185430463576,
'DXWLESw1LI4d4ykQb2WXkA==':0.235294117647059,
'e4zblouPEIx3n9BVs3w7aQ==':0.211764705882353,
'eaLxepRBq+GadmstciW68w==':0,
'eAzQEpB3rx2p0UrbfgHNpQ==':0.205882352941176,
'ebvpHxN9Caj7sQp81othIQ==':0.110091743119266,
'ecOw0wK5rahCJdV1GuG0cw==':0.116666666666667,
'EcX2VL1R3bLgx82O83O55Q==':0.0892857142857143,
'EECV2Abf7gFEk41DGkUnow==':0.186868686868687,
'efKFhxpEWcpSNTzHjqGQvg==':0.153846153846154,
'EJAphPGCgAw0nW9VecfTJA==':0.173076923076923,
'ekd288G3kkC+Oumkq1jo2A==':0.125,
'EkqTGP51r8PbgV9fkgVqpw==':0.147286821705426,
'ELjiIpmjlIb+btRuYyn2pg==':0.166666666666667,
'ELsschmWC+v8/P7GHiMxiQ==':0.0384615384615385,
'ElwZdNh15ZsLGcnyx13eAw==':0.125,
'EM78bQghvvBfibb0eJhEAA==':0.03125,
'EmNV5P//+6W1sF3aRRrAjw==':0.25,
'ENg06BCZGxpzMjjpYX761w==':0.126984126984127,
'enpy1cg/s26k9LunMBDCug==':0.212121212121212,
'EoCf+Uggu8mKlI/MsVtqSg==':0.142857142857143,
'Ep2m8ozv0CzdlnTqajCrWg==':0.166666666666667,
'eqVvYuqqJiucRjFOOuwtRA==':0.19047619047619,
'ERh0Pv9tBRaSHHlPYzVZvQ==':0.198473282442748,
'Ernn+uVXCMq/6ARrBCcd+A==':0.124497991967871,
'esBH0AB/XRFdZvZ/6McEkQ==':0.133333333333333,
'et873BZSG7s+KhZrXhG1aw==':0.181818181818182,
'eTj94H/Mw7BUo04daaMU1g==':0.173160173160173,
'eVAcpQ7iTXuSa//hVIXA+w==':0.180327868852459,
'eWxS064nYbrouukSphiNgA==':0.1,
'ewZNBPGNyP7bJTo3Gsiwqg==':0.175324675324675,
'eX7JKuG8JVCRzoiKoQEssA==':0,
'exaXk+hI3vMFsjz87ctTUg==':0.195488721804511,
'ExyXSIu9zSfRKXY18ZnOGA==':0.294117647058824,
'F3pMqaCLRl6rh5wH4DE9qQ==':0.176470588235294,
'f3s82NGLzU+6C+Pw76MXVw==':0.192307692307692,
'F7JkBTM6gDhAMf8xds6YNQ==':0,
'F8QdkXCnxwwNXagY1oJRrQ==':0.416666666666667,
'FBNTuBveNlz9oJUvdaZqDQ==':0.193548387096774,
'fcfS+HTptQzet32NejNL8g==':0.173913043478261,
'FcreDj8X5CjkLfqOjlBKIQ==':0.236842105263158,
'fEnEyuf0nGacIvfSBaKhqQ==':0.181818181818182,
'fFyWqeLBDdojeuuN4gNuqQ==':0.25,
'FGTtRQEBB4B15nH5Vte9xg==':0,
'FIHlUczFmo6ANhTsAEYFtg==':0.169230769230769,
'fIV31b8X+o9p/Oj5HpTt5g==':0.1,
'fjJSCCK6wz/Js+JcRiAuCA==':0.153846153846154,
'fk4D1LTtLaKbEblz4zDICA==':0.238095238095238,
'fkAaDeMiKmsihBTEa/6iXA==':0,
'FlDT+NciNeB3SVGC5nlhNA==':0.146341463414634,
'FLJbidAgU8gWgtUzYJmApw==':0.15,
'fn7l/Hs5Wkgz4Q7+nfOqxg==':0,
'fq2ic5Jz8vy5IOj3Pa/Z9g==':0.333333333333333,
'fQ4ULAv1n3JiqT7WeCsraA==':0.19047619047619,
'ftpTpY9Fmm6bOBuGbh8N+w==':0.384615384615385,
'ftWWLW0jQmzYIBeMiC7FFg==':0.133333333333333,
'FujV8htO43/LGUD1V9NngA==':0.159203980099502,
'fwPh2kskJD3bOB6XgjPHJg==':0.428571428571429,
'fwqCm2ldR8+fZdheYKh3Ug==':0.0909090909090909,
'fwSj/nmlM0wmet5A3PW5lg==':0.2,
'FY7q6gpLm5BUSqiE4YEoZw==':0.2,
'fYAozfJk3qn41LQe/VUX0Q==':0.0921409214092141,
'fZuSmNbkrQcuaqySKY4Hmg==':0.04,
'g/hVcbC14/9WRVEbNbaH+A==':0.111111111111111,
'g0KznB8XlAtexDM3id+6lQ==':0.129032258064516,
'g1jzaXao+lkUBUv5x3JP1Q==':0.195121951219512,
'g8vtvVSa9PJ0fmGMs8oR0A==':0.179775280898876,
'gbRT1PP2MLq7KROUdMXZYQ==':0.466666666666667,
'GHTkp+8OWjGh7D81GnSzdg==':0.0625,
'GjbzPyN7W+BM23jaqJlLPg==':0.214285714285714,
'GkL9bBgF2jckhpaHFrJiKA==':0.198529411764706,
'GM7uNzwC4wTu3Bp3axQ7HQ==':0,
'gmk68C3sGqXQG9zVA73dtA==':0.18,
'gMWLb1IoTH0AeB4y+IlXdw==':0.0344827586206897,
'gQGV/JU+EeedN1/VyrnhBQ==':0.25531914893617,
'GRFpyoMmME7ID5YLTTYNkg==':0.147058823529412,
'GrQ8Ig630ewSariKys+b7Q==':0.207207207207207,
'gRwbqxxLj5tkZy5+8dSD2g==':0,
'GuftU+gzvP8qC6UKynd49w==':0.166666666666667,
'Gul3rhjMXQ19/GoL3I1kSA==':0.136363636363636,
'gupRYCEwfV8MlD+HhQ9c3w==':0.139372822299652,
'gvM0bJCaUc/VXQApP+4P/g==':0.266666666666667,
'gx9Ce6IBKdsmpKNDk4hgNA==':0.208791208791209,
'gxFieADijS4o5i97AFBmww==':0.142857142857143,
'H/eLq450YYDf8afnVeyrjQ==':0.181818181818182,
'h+Pk51hPz8RqUgjRcrR+/Q==':0.217391304347826,
'h1rCEaGfZsb392GWdfLNVA==':0.375,
'h4ONeP3AxNT1T8uS1QFTfg==':0.160493827160494,
'H6neto2lzDZ7atH4qD710Q==':0.111111111111111,
'h7nZ3pw4bvxkxXAHaOHE3Q==':0.153846153846154,
'H8o0VrsmlsxBTXJsFMK6pw==':0.307692307692308,
'HBahx2KpFkxOj6c+UKBEdQ==':0.129353233830846,
'HCELnz7V8+yOsKuOWodgbA==':0.111111111111111,
'Hcg1m0XQ10qjs2/e1tI74g==':0.176470588235294,
'HCXOSVp65D++IB+I1Hi9gQ==':0.0645161290322581,
'hFbDhxOVszll/KuAzsKdJA==':0.13855421686747,
'Hfh28TzqkRno6rOU/tjy6Q==':0.179023508137432,
'hiBqm81T0d8P1mHViqzxMg==':0.285714285714286,
'Hioks5E86jSA+sbbi9Dcrg==':0.151162790697674,
'HjYWlerxrqmlPcHC6g3j3g==':0.148936170212766,
'hK5O9fjHz2QTX+3oySnTmQ==':0.411764705882353,
'Hk8o0PDyiDYfJZWYvuMVow==':0,
'hkC07VyvGOANrruPOgds3w==':0.25,
'hKNrx1SIxunqIpoE9PPlow==':0.142599277978339,
'hlapUTfEs3OA7nXvGqQyRA==':0.12,
'HNyKljS/K9o5oFX7N88Yaw==':0.1875,
'hpkp2zFfrG6PN51vD6fO3A==':0.130434782608696,
'HPxoQhUg8oaN8VYL/isZNA==':0.0714285714285714,
'HQ/W6OcTriezXrOWODdlgw==':0.1875,
'hQAV9T9b7/aeJp3BhTRlaw==':0.195121951219512,
'HqN+6NO45WFJpsUd2ElZCA==':0.195121951219512,
'HqOe4NkDt8oJ0fEt6FvGLg==':0.177215189873418,
'hQOxJr8ryVBQt9oMOhqYHw==':0.3125,
'hRPs+wgEqGksA5W/zvULhQ==':0.168831168831169,
'HSE63LqkI4coL+lMH4n2zw==':0.144654088050314,
'HsKTgfKKhKdNmHuxj+GVsw==':0.0666666666666667,
'HSt1bN71jx0ez83iLI8fZA==':0.165938864628821,
'HsUvYJIt+u07pfvXbSnm6w==':0.222222222222222,
'hyPOsE4DKv5KrZ6hbCMCBw==':0.307692307692308,
'HYzYjUwJtY3lvfgya6yZQg==':0.166666666666667,
'HZbXSFDAy0yez8OSlU+evA==':0.144230769230769,
'I02gqLQRIqJiiLf1Gqb+MQ==':0.136029411764706,
'i036nmJ7rfxo+3EvCD7Jnw==':0.182716049382716,
'I59IKILFeR11yojhG96N+A==':0.0930232558139535,
'I8n35waQHGN1rLLSQBD/Qg==':0.130434782608696,
'i9Ap6n65TRdZviFNBfGEhA==':0.102040816326531,
'IaUfsy+XaN7LBPluQEaSvQ==':0.136363636363636,
'ICbriGITHdm4w8HI0Ho/iw==':0.0810810810810811,
'iCJ+T8RvuvTl4G6bo688FA==':0.136363636363636,
'Icv2c+6SlxE0O6i2VHUI6Q==':0.133333333333333,
'IGycyznOfhr3iNyPKNJ8Kg==':0.25,
'Ii/KVxrwaaOrM940OnZ0yw==':0.2,
'iICl3kwjIdcHIAoSZKAHOA==':0.15625,
'IjXpLnqKnEeDRLXYk9bemg==':0.2,
'IkavYIMybwGTChPpS3dJ6Q==':0.153614457831325,
'Im7v2OR+HUO2gye8nDXXIw==':0.202702702702703,
'iNmZ7fU5M7pg3Og03QYh5g==':0,
'InUTTCNwpW6OtbLLeItmBw==':0.0714285714285714,
'IOEkieL3QL+KWphLl5IDrw==':0.27906976744186,
'iORrk+krCdlDDepzqvdniw==':0,
'IpcloQ5L38SqkCCOw56sxA==':0.165289256198347,
'IPGn6i1qQFvLtxHoo9cqfw==':0.0526315789473684,
'ipvYHKyGwDLdzxnasQhuAA==':0.166666666666667,
'irsMSqsXNCbRYIl+u1eNwA==':0.176470588235294,
'IS7hpLnmcFmoFQx5fYolyA==':0.170138888888889,
'IShf7p39QTwrCvWknHicwQ==':0,
'iTeGZrKpH6XtSuhsXQ3+VQ==':0.125,
'ItM3MSrxU3f4lR61RPOW7Q==':0.0555555555555556,
'iU5APeah1YL2s1qVX4C7CA==':0.188405797101449,
'iVNgSPSgxCdiUbE4lcrMDw==':0,
'IvtRWE7TLKqrAj9T90HrUg==':0.18491921005386,
'iwf3hcZQd9GIyM03+T/GXg==':0.192307692307692,
'iWVlyPmoJEGpgS3zVnPwAg==':0.25,
'iXPBGYUmLilCBYy7KCeQhA==':0.28169014084507,
'iY2cULhh/NFBaiOCRferZQ==':0.140909090909091,
'IYBrtiT+srm+DolzEEK+sA==':0.222222222222222,
'j/j4T51QPL3ijHPz3L/HaA==':0.0769230769230769,
'J+flGzslRkr8l4ELsYOW+Q==':0.3125,
'J0++ISDuLzJ1iMrHfFKwHQ==':0.263888888888889,
'J1grJUbsFiQmzG8DCPW1IQ==':0.125,
'j1lLKEXg6E5CFz+jCr36kg==':0.1875,
'j2mzEKmW+bpPLSiMLY9cuw==':0.21978021978022,
'j7LvRJb/SF1oo2L+1ziNyQ==':0.363636363636364,
'JAH7Mz3uhkwsIfkUurhC7Q==':0.5,
'JDf3u4+tjF3RVS7kjksW/Q==':0.205128205128205,
'JED9HVqHqFnxwrcxNNa5ow==':0.166666666666667,
'jESQiiWol9OsdkDzSiCmKg==':0.192982456140351,
'jfTTkMomkptN0tF/93y9lw==':0.125,
'JGmucv6zvuwtYCVr8OtvGg==':0.27536231884058,
'JhOB5cSTnYlnLaFsGcxt+A==':0.270588235294118,
'jIW70HvBdeCTAm8mODr8Aw==':0.222222222222222,
'JltpfxvNsNdGCgO9iKovUw==':0.0769230769230769,
'JmsVDkv167LgHZjuSdEjiQ==':0.375,
'jTwINtRFyPuFao54O3d1WA==':0.0555555555555556,
'JuoCK6wC8GxWmXQI6HH28Q==':0.08,
'jwftKJg3HZ+HutSKPgpaGQ==':0,
'JXScfdU5aBPJzHVfRMmaxg==':0.109090909090909,
'jyYR7xy1EtSWpylRSmOftw==':0.0952380952380952,
'K/xBWevbIIDPewVFp8oOiQ==':0.0714285714285714,
'K7mULLUNBzhqFma7M8zivw==':0.307692307692308,
'k9IyxS6XB40A0nqywOGxnQ==':0.166666666666667,
'Kc5+lDrFDd/RM8Q5Rws1DA==':0.232142857142857,
'kCOjWLXna7GBPdIXo3w5KA==':0.166666666666667,
'KdNu1USv6sgmK09rHspRDA==':0.108108108108108,
'KDxcFs+XsLV6T32yQCsu4Q==':0,
'kEz9uhH3GDt1EHc4IDsiSg==':0.0789473684210526,
'kfWDI5wYFHdi9PtKFI9EPg==':0.1875,
'Kihc6OKBTIHsGwCQy2Vruw==':0.162939297124601,
'kITLV8ipBDiQEaeF0FGqSw==':0.0714285714285714,
'KL55EaO+WBZMjKB+ynVjEQ==':0.222222222222222,
'kMUS1BZQCedUJNQL/GJymQ==':0.222222222222222,
'KN0vt6BtxtgHxRJOA6oVLw==':0.17351598173516,
'KoN7SzIgpUBxm5MBhHdTMQ==':0.216216216216216,
'kqDwv9CKZ2T1dwke1AK1mA==':0.133333333333333,
'KqSxsNicHYR+QWgRIFCBsg==':0.5,
'kT9iINxmEtNoxGqiEuuu1w==':0.0666666666666667,
'kTl9rgs6+O0cwSuTismayg==':0.181818181818182,
'KTtA1qfBx+4ENG1GTBiHww==':0.147435897435897,
'L/NBYGrOnGTrQJbGfTWtpA==':0.25,
'l05t4xr/2SZj8VuidikCww==':0.171428571428571,
'l47yP8PkB8IWRzmj7N8Ufw==':0.217391304347826,
'L4Bjkof4KxiN2KFp2tEe9w==':0.117647058823529,
'L4CoyKAcrcgIPrgVRJ9fAg==':0.126984126984127,
'L97rCsCE5APLgqnZGwSOAg==':0.232558139534884,
'lc/1f/5DfI0oWgF2ipsLkQ==':0.15625,
'lc9aRbVZAQ3ZYTdFZ0V2Gw==':0.192592592592593,
'LcHrv+siBua33oaCi1Q1UA==':0.294117647058824,
'LDqH94ji8KhBsmaceDPr/Q==':0.181818181818182,
'Lep9Bp6Gs/eiJpil0TXP1g==':0.153846153846154,
'LGXiyqOm0Pau1Th7nSXu6w==':0,
'lLe2iVfUFZSZusoGCZYB8A==':0.177242888402626,
'LLG3PSa1bYmi9oVG9oSxvw==':0.145569620253165,
'LmeiQ26p61Hfye53Lk1UoA==':0,
'LmjtKQouSVFzqCkMcwJ0SA==':0.0769230769230769,
'lOmTZG4YxhrrBKflG8f7TA==':0,
'LPSq6mPB2Yk+CeoYxw8QIA==':0.0930232558139535,
'LqsmduGRTUSbhLbKf30e8A==':0.136942675159236,
'lQT7EGutDeDM/xmT5lzNcw==':0.272727272727273,
'lS+ThfYu6WfS2gQMS4S5Hw==':0.181818181818182,
'lT23kf8tNkrW7lUYwH1PWw==':0.108247422680412,
'LtIDBakXnGgu/MHBumXjHA==':0.268292682926829,
'LWMIObsjhPxQFwvCahY9AQ==':0.0793650793650794,
'LXjBg0/maNtWTDWu6bLPOw==':0.147826086956522,
'm166fujAW3mxeazX/Dgeyg==':0.190184049079755,
'M3FOMrkKIV14s97l3u4IQA==':0.0930232558139535,
'M8RmEmmp98zsHWjpLiW7Vg==':0.111111111111111,
'MA209HUCjvUmy104wTSikQ==':0.185185185185185,
'mC4ZOASsBkM697YrA22bYQ==':0.15,
'mdDQFcuO/VUM3aIQszxuZQ==':0.0967741935483871,
'mDXc6NkEGziz+mxlOE9Xeg==':0.178294573643411,
'mE0UO1Q2JqmS/EwMqUJkyQ==':0.111111111111111,
'meRBOj3Tu9kSlyS8Uf7AXw==':0.105263157894737,
'MGre4t/HXqyRfPOprm3izA==':0.18141592920354,
'mHnW/fqo2NeNGm6F0WwZVw==':0,
'MHoZ15RSw20DiMv3vOQbvw==':0.0588235294117647,
'MjakGC6pkQM8oCMe83Thug==':0.12,
'mLEJhxoNTrqIgI+q6l/oag==':0.0714285714285714,
'MN3r+M65Vz4iIYh9Nntjjg==':0.145161290322581,
'MN7naDX+mPOhbDPoqRDXDQ==':0.111111111111111,
'mpPtfHOYCmdkXJNOjBaizw==':0.230769230769231,
'mq3SORxufQng0jdXMEIOtw==':0.171428571428571,
'MQiQ3HB3qlqhOQ3QxXu9Tw==':0.0833333333333333,
'mS9HJkeKdFk7XE21+BKzkQ==':0.117647058823529,
'Mtob4uq5HPcHDH7Kzzx3kA==':0.0869565217391304,
'MWP9HGlQDXa842uslBCU+Q==':0.121212121212121,
'mWxzlFyjm/wOdkVEDoAZcw==':0,
'MXqE7D0NclzbvSzSxV4b/Q==':0.197278911564626,
'myEO0ZfZDzvidOEp97wBsQ==':0.1,
'MyiuiHIVhsHyPC3CgqXtWQ==':0.131428571428571,
'mzP2qHgSpd2BLkzFlL53Lw==':0,
'N05wj11+wSP2tMnqGRYnfQ==':0.3,
'n0Da28ADKGjU3IBImRWNWA==':0.116279069767442,
'N0H5GvJrEampcsd1AyKYWA==':0.333333333333333,
'N1AWMtJYyPPfOVe533As9g==':0.116279069767442,
'N4DAbeDYASTirBqFvPf4DQ==':0.166666666666667,
'NaIO/95FrB02NeFEuzhU9A==':0.160714285714286,
'Nc5yVXlPNXooelHsszpzDw==':0.217391304347826,
'nCjvHIZFNWykiiIQDiKI9g==':0.263157894736842,
'NF9JdawxdgRu0BVVD5wsRg==':0.291666666666667,
'NHfl5izmBtAizBUGszslHw==':0.125,
'ni6GWXq/AuwzU31EkEAxTA==':0.294117647058824,
'nIA2hRpjakn+FBEYU9bH/w==':0.368421052631579,
'nIZIsTidCdFq2J9Hh/g6iw==':0.214285714285714,
'NjG9C0ZEk2ogpxsNL8F+1w==':0.191489361702128,
'nJoClk5m+2ITbwX4xW3JJA==':0.126126126126126,
'NKEFSF7dTIzmRRc7x/Cu0Q==':0,
'nmDhVRHJAIkM/m9h7tU8QA==':0,
'nOKb689mQzSXMO20wayqpQ==':0.136363636363636,
'nP0qGO8FC0NXwBM5OMBcbg==':0.15,
'nP1q0F1ulHRlYWc8VL3LKQ==':0.111111111111111,
'npqstT9CaYhFFG63qsDADw==':0.3,
'npZpnVNmxWOW6iN27MoFMw==':0.168141592920354,
'NRPjmoqlw9IryY0gowWBKA==':0.0967741935483871,
'NUeQU7D4/qxkWrs9UFqkxw==':0.133333333333333,
'nuopMCSCwGDXd+5RSCAVXg==':0.136363636363636,
'nuXegTWyVi2zBHAPT9L8sw==':0.166666666666667,
'nwcAnnxYulRiKZmL6fCSAw==':0.0857142857142857,
'nwfLjGhMSJSZy5E7L3QCKg==':1,
'NwtDzLinSoQoGo4SbA2/zw==':0.0555555555555556,
'nxTjKvOL+CpcmLn9HHbN4Q==':0.166666666666667,
'o1cb+1CwliT0pnMihdizEw==':0.14207650273224,
'O6wPQNEKQeADo6BAPZzCQQ==':0.0909090909090909,
'oAh62ItihWuYRWSSGxXszQ==':0.1,
'oAJut+wvWcA9SKa65aezMg==':0.194756554307116,
'OCd8tOYemnUuHBVx4Za1zA==':0.121951219512195,
'oD3xyWKaYvCGy/IyNSMjkA==':0.208333333333333,
'odHAvmy2uik1SSuKONc0Gg==':0.3,
'OdP63a2Vs7T+5sPtpO1ZjA==':0,
'oEBuUcWy3fDoIEbp5xswrA==':0.157894736842105,
'oEDhNECGtnau1LPopno+Eg==':0.126436781609195,
'oEDJ1FA+FobayzCtrAQGPw==':0,
'oEmrODpHVDJ7UiUVYmFeeA==':0,
'of33I/pg5MTK43dIbQTscA==':0.102040816326531,
'ofklE1Ai/684J/g5J7kXEg==':0,
'oFSdI2XTqcvZNZ8oZ/oN6g==':0.1,
'oI/VXVxQel25N3L+uBhc8w==':0.161904761904762,
'oJYtqF9Gp0R9l4qhUW/K+g==':0.183098591549296,
'oKqhZETjpPJLqz4i3ghSXQ==':0.0769230769230769,
'omqQiUb0rEkwsz9mAL+Bkw==':0.144144144144144,
'Omx3C/sIKz8shVdfLE1y7A==':0.136363636363636,
'oOpFcGVknVaTILwH2MFVtQ==':0.285714285714286,
'oRoy8Vafirs+M5mUV4+dxQ==':0.285714285714286,
'Ot/c1UR2vIOnYvndd3R35g==':0.140350877192982,
'oT/OryiHtXvjWk/J3Ysp9A==':0.123893805309735,
'oUhLG6Tk4+p+57MzEWA2Pg==':0.181818181818182,
'ouV3nvrDuOrqW5UiDrHZ2Q==':0.0909090909090909,
'OWcFS1xDkLWoNvJbwwtV8Q==':0.105263157894737,
'oX9449UbLO9n6Ndcg0F6IA==':0.225806451612903,
'oX9IFR5E0U7fU4WId/oQ6Q==':0.094488188976378,
'oyrt7nHjoQSc58vCxgJF/w==':0.122743682310469,
'p/FEmluWN/c+cH5hSpPwsA==':0.166666666666667,
'p/jVmYTPHpqS6IaEftzD2A==':0.375,
'p4ojJIxrMcSv5BztamNgDg==':0.208695652173913,
'PAS7kdOVCgUMJK5OXw1SAA==':0.235294117647059,
'PC7jR66+ygcMDBsuITKtFg==':0.187692307692308,
'PCQgGF6achSCqninChuGbQ==':0.114285714285714,
'PDr7RhXBAVcPDu87O/jnKA==':0.0964912280701754,
'pfQNK43FCPp1p9RXZyNjfg==':0.0833333333333333,
'Pj4QWEJC9oTDhu1zAHF1hg==':0.170731707317073,
'PjTIDfJsK0DKL9fO7vuW2g==':0.21978021978022,
'PkGb/AnhhJPNUeMaq1GshA==':0.0392156862745098,
'PlicsfJCy4zgJNnamdNWOg==':0.130434782608696,
'pmx7n4UnSncMGWoc4MgFIg==':0.207920792079208,
'PNDzkBvKw9WQNddeMbUYfA==':0,
'POqAeqMS5Xsm6gz1HgR5yQ==':0.217391304347826,
'pP2Eu221AcsIrI6c9DkMRg==':0.176470588235294,
'pqWmHYAmi9K3Ob25DA6PMw==':0.2,
'prE9CWESdWzQaA2PIv9pDQ==':0,
'pt+q5jedFllxq1jKlja0fA==':0.198473282442748,
'pvcStsAtC7wFtfF3yvKsOQ==':0.144067796610169,
'pXMk/PSnWBboUi2hDrA+cA==':0.0845070422535211,
'PYqCJRtznP1Hgp8pQjS23A==':0.136363636363636,
'Q+Tnwq8amUZWt+/HIeGlwg==':0.133333333333333,
'Q37kpg1/78yS7r5xBjLqnw==':0,
'QaUUB0D2sslcn0T7qFyapw==':0.260869565217391,
'QBWzGFVC0JGKWqzLEJA0jQ==':0.428571428571429,
'qf2kzehI0938fu9lrNoQvw==':0.174757281553398,
'QF6pl3PK1Zb0VJxw2R/HTA==':0.165680473372781,
'Qfv/qBk+4khG6YR7qYNm8A==':0.171875,
'qgK4LhaYy8z7/SmWrY5O0g==':0.125,
'qHANjdHx2y8lMMpROPif+Q==':0.2,
'QIRPT+tUUUeCVbRJv9hBJg==':0.1875,
'qIVF/bhe1oSxEhZ96i49Qw==':0.111111111111111,
'QIZ1E9uSooe6Oz6lpLsN8A==':0.175,
'Qjb3p2iXK+JdzuHl5bJyYQ==':0.114754098360656,
'qjBfnjPHvEg1xi3WS/tpQg==':0.176470588235294,
'qKogS9/663ARmbMpyXG9og==':0.153846153846154,
'ql9Tq+WRLqXnyVdZkMRgnQ==':0.19435736677116,
'qmV96MVxx+k8Mm75oS+OKA==':0.277777777777778,
'QNFfYDrW6HbyWqXEmB2Z0Q==':0.142857142857143,
'qoprIqzZe10CvUxWCwoQXQ==':0.181818181818182,
'qoXZbVJ1Y5vzvlF/aPgkUg==':0.114285714285714,
'Qpbd6x/IiFmnMH+m2kwk5A==':0.230769230769231,
'qRAlHtGoukaaGiVQc1ACxg==':0.11038961038961,
'qs9w4Dr+BlGtM/RtB4A1hw==':0.157407407407407,
'Qswwd8YKaKxQXDY7Cb72iw==':0.24390243902439,
'qugNlbcVRtnhg8ZVdTyuwQ==':0.208333333333333,
'QxO1hh4Whqpa5+CYH31Neg==':0.176470588235294,
'qYHD2XJpJVJTlVmVMyhftw==':0.317073170731707,
'QzMHZ0rf3V+7Bbg3fK72/w==':0.241379310344828,
'QzyPTAV2JtFPv87y44XB1Q==':0.2,
'R+uQ1ktvrT3MLnrqEKBJYA==':0.121212121212121,
'R0qubXDW/aQ3fwbaE7JtgA==':0.192982456140351,
'r3ekt+aj3O3sPA5ceTzJyA==':0.142857142857143,
'r6iwd76uhPAaXWJHfKmY6A==':0,
'R8Z60wq39MHue27cjxCPLw==':0,
'rb1qcCa1jNDJHhYSao4wig==':0.232558139534884,
'RD4QI4NseXepqz8YsrUl0A==':0.142857142857143,
'RdNDocXumvzqLlZlkZX6cA==':0.277777777777778,
'rESwrANTpexn4y8wBZ5yiA==':0.207207207207207,
'RGa9M/V6+Tq91fFEhizdDw==':0.214285714285714,
'riz0BYG3RAaC13g07p/uiA==':0.25,
'rJQcLYRAx+3RHWCKXr46QA==':0.117647058823529,
'rkDyGnLKp70SXCDBgJUt3Q==':0.176470588235294,
'rkW8nZmkD5DiWEa2Gu99mA==':0.107692307692308,
'RL6ZjOwKWDOEJCleYGx69g==':0.173913043478261,
'rlWIXTBO+VOa34+SpGyhlQ==':0.164948453608247,
'RMemvJoP37pROUW9ap4c5w==':0.111111111111111,
'RNooQ3wnU394hUJ5FvEzsQ==':0,
'rNXFOEsmFlof8Vwo9dYFmw==':0.133333333333333,
'RqGJ/uzOqcR/qObdcZqsFg==':0.25,
'RqIbiZ1K1Vk9O6TDrHAIhQ==':0,
'RuDR6dCOslAlVEo8/PhGvg==':0.133333333333333,
'RV20KEhsrQKSfu6pAq7j6A==':0.15,
'rvdltYNojzCjA1gRsbX9fA==':0.127035830618893,
'rXibFe1MMofS9tw9XYy8mA==':0.166666666666667,
'rydaDpxb8CGsN78tK2WHQw==':0.3,
'RYeqIIZnccjbCZXYnLh1Pw==':0.0909090909090909,
'RzBRHVDh7O8oq77Z8+TDyg==':0.217194570135747,
's+fopQ9Hi+i9zOzJ/00N3A==':0.166666666666667,
'S2sTqBo6IDoNL5oPIYS7CQ==':0.125,
's5Id5Ir4GTuju0MppVP7wA==':0.19047619047619,
's62wBcHzajP19IrXuFEJug==':0.214285714285714,
's8HgglTLhIhReHosxRqtdw==':0.125,
'S9tMsaCiEJJ6O2QvuMtx8g==':0.235294117647059,
'sB60wx+QBjwwIrA3pO4ykw==':0,
'SBuz+IviKpZhxiDs5bm4+A==':0.2,
'ScZieaY5KPxpsGGpMqOABg==':0.175257731958763,
'sfVhE81w8VwY0KuIEpmLTg==':0.198275862068966,
'Sj6c4laUuoW/a7vf2SBInA==':0.145539906103286,
'slzOv1fRMPe5/ymd/ovOWQ==':0.209302325581395,
'SmFDki9eQVmgfyM9ys2m0A==':0,
'SOCjb3inu3JVewdo2W/n8g==':0.305555555555556,
'sQm9HHU6gfkQcogtlZ1Y4w==':0.210526315789474,
'sS21wy0LkJGJmBOOVbOG+w==':0.166666666666667,
'SsEl/5Fs4cNzun/3XUqNJQ==':0.127962085308057,
'stN02I7eyzwXQTYGuN6y3Q==':0,
'SunaNZUAzto0k0j8oV/pLg==':0,
'SXODZIZu2r9R/9sY5w4Q4A==':0.15,
'sYCE4AXB5PYfso7XcTfv7g==':0.0793650793650794,
'SZa2J/hvPpUaEITxFL8x7A==':0,
'T/mZTZAVjSS3UBfpi9KnpA==':0.215384615384615,
'T+xfAs8xtuMBwHPJxXGX4w==':0.15625,
'T1gWYiMFG+KjE1K3DIt5pg==':0.125435540069686,
't2a9PeHjZwe/gRe6+/7dhg==':0.170542635658915,
't3CI8dP68P2ldES51BPLQQ==':0.165467625899281,
'T4lbvoUZy52edw96/Ts3Wg==':0.125,
'T5Pclb6ZCuHrdcjcM8wrug==':0.148148148148148,
't6wxMZ6eHJp+HUfkHuN+rA==':0.142857142857143,
't7CtZnjVvSBn5v4TTn2B2g==':0.333333333333333,
'T9u1Sr64GGPRirbKbuaA5A==':0.166666666666667,
'Ta5b2uDXVDHXgyfGlLQc+w==':0,
'tBrVx06qM6tJmdjoDzatPg==':0.147540983606557,
'TdoBiq04SGp9wpWkie5iSQ==':0.166666666666667,
'tE3Q+4eTcNq9iIpY4UYl7w==':0.0714285714285714,
'TF/ovc+vtsGSmFCTrVWXQg==':0.195652173913043,
'Th5zCBN07Rd2TnG4FcOiWQ==':0.128712871287129,
'tiatIRS4zdlwgBwaAOlWcw==':0.277777777777778,
'tK5UwU6FXJdfazfQRclEoQ==':0.2,
'Tmw+acWjl2IbfXNGL43qeQ==':0.161290322580645,
'tOSkXzlaaFapCqvFytC1Zw==':0.134831460674157,
'TQlmm032t3F5qmD3Q2G6uQ==':0.136986301369863,
'tqxAPce4X9X/fqzMHlgmCA==':0.25,
'TRsJTn8UTdIm2qrYj85ZfA==':0,
'tRxc2qoJizvyW3o8jx9v9g==':0.185185185185185,
'tSmKAYq5fMkyjQtcdyd1wQ==':1,
'tTrVaMMCLxFIjYZJ1nkbog==':0.122950819672131,
'tTWFJ0AHsymBCpNHEO9Oow==':0.146464646464646,
'Tyi2Jqwofz2/P/g8wG4b5Q==':0.186046511627907,
'U1eFWnd+Mn0SxlbTySEwqw==':0.1,
'U5KzPwt3Mkn1hZCR1B9Bxg==':0.129032258064516,
'U7kS2ugOoYE/0PivxH3MHQ==':0.183823529411765,
'U9uDiyNC0t3IuzDd6ncMMA==':0.179487179487179,
'U9YAqracOLxHt8fP5zjzRw==':0.121212121212121,
'ucqEp90PyynGDzQTeJCTQw==':0.152941176470588,
'uD+Svt3TITmpXa3HSotWBQ==':0.210526315789474,
'uD6DENgFu6+3SDz7s1482Q==':0.166666666666667,
'UDOK3muc87pI3jQqZYiVcw==':0.163934426229508,
'uFRgzM1tvVAZEVREZHeayQ==':0,
'ufSAWr0+Bn9vQB5+Pvc81Q==':0.142857142857143,
'UgdwYbK0DeeZHMPEYGsK4A==':0.184615384615385,
'uhLpRG23DS+IvlV+hfwQRA==':0.158730158730159,
'UJAvD8H/5MkCBZEjpYsHTA==':0.333333333333333,
'UJaZhkXpEobVKN0PLoLdcw==':0,
'ulqC4k1Jnar6PynmPR4f1w==':0.285714285714286,
'UMrxAIausSq1WdWIhvrBOw==':0.125,
'uojsVFfHqs73tTRL1VhNBA==':0.123711340206186,
'UOUNSI9SVQYY5TbeMeHlig==':0.175,
'upFXFtCv82+xzlFJnoIU4A==':0.181818181818182,
'upUqqvS50XMxKwLCMM2phw==':0.217948717948718,
'UpxfDt2ltGk9jZ8vGs5Gdg==':0.0459770114942529,
'uRIDZ7PsItUzQfUTgIYptw==':0.129353233830846,
'uRsj/fL/xRxAVPXWA/JwmA==':0.15702479338843,
'uT14vnr+Y2y0UtmZ57rckw==':0.145569620253165,
'UTaM5Yt+Bi6QpEs5Np0SuA==':0.217391304347826,
'UToPEbqOWzwagTnk+g/pAQ==':0.0714285714285714,
'uXjHvlms0V0bCQgjO/zLbw==':0,
'uz7fSS3qhTu+WGmISPHALw==':0.108108108108108,
'uzfL1XDSVwfCcEB62KNrXA==':0.184027777777778,
'uzjeffyTUYxde6mQ2S+VDg==':0,
'V+wqDbb3wAqfG8fIzWhfbw==':0.1875,
'v0l4jvqA6aXfAU9f8Gy3Aw==':0.125,
'V2rI9qb75728aCzlE8wkuQ==':0.105263157894737,
'v7rlg55y8owGR46ZP6RsPA==':0,
'vbHz2gXMD82PGGioPNQyiQ==':0.208333333333333,
'VcjVos5EGW5PB2V2p6mHpA==':0.181818181818182,
'ViaguLQQZPbLfCSiX/EwpA==':0.16,
'vIjt6xxNvfC5Uf7Od/FWHg==':0.111111111111111,
'Vio5NhG+MLFlLYydTTu7qg==':0.146341463414634,
'vjsYtmgFNg/8e4C3S58AiA==':0.130681818181818,
'vMR3ZftjD8zK2zQQfaehxw==':0.130434782608696,
'VPBKul5HynfVHU2+FdquGA==':0.181818181818182,
'VtlLwk3CxJPRB1EokQEnRw==':0,
'VU5ioc5YxXL9FeQSIELdKw==':0,
'VUunZMuj9W2gGlAhfUeE7g==':0.129032258064516,
'vwoGcNrYRsau3tbrE/eDAw==':0.137931034482759,
'vwOrfTdPGtxvAOVZsu+5cw==':0.192307692307692,
'VxP6oNf4pSuRJMsnPcVy8g==':0.147826086956522,
'vYKZVZfAwOMRjE0QGAYvbA==':0.186666666666667,
'VywneLSFZkE3IvJdVvylkA==':0.0740740740740741,
'Vz/EM1+cNkUw2papMR7mbQ==':0.114406779661017,
'VzBKsWnQK586ThbTygkUmA==':0.181818181818182,
'W+1rYf2G2k3TQNFJ/nJQUA==':0.111111111111111,
'W+DGxK3IUQRy6BYPDv9Vbg==':0.208333333333333,
'w6e3ojqnWWYzuFwi3nlr5w==':0.156794425087108,
'w87I4GAw7wA1w4QOZXkknQ==':0.222222222222222,
'W8Jsmmp9B6mCrBv+U1+1Ug==':0.180327868852459,
'wanYIYslFQaTtcN0ywXF0A==':0.137931034482759,
'wC4DJ/CU2OoTai6qoZwIMQ==':0.166666666666667,
'wclBli3JNIMWkGGKjYjIiw==':0.157894736842105,
'We5iqA7mFsQJw9oV8jjeAg==':0.173076923076923,
'WfMrVReriXxW03HGXm4E2A==':0.235294117647059,
'wIHOXUBw+ao3rzDxSnlWTQ==':0,
'wJ1G9dXP6aZ8Xa0n+PV2Gw==':0.213333333333333,
'wKOIgtpAn/7tNSu7AnYbWg==':1,
'WmEBlCYK6CVva+Ne5aBIBw==':0.1875,
'wmQA1+icWwTNPqKBeC0bNQ==':0,
'wNSnVGK7PPbkbLG8aDvSuA==':0.20863309352518,
'WNyWKoKsaXgzFfqr4zGmzA==':0.178571428571429,
'wpeWqgg1ZDALHYW2k0Nqvw==':0.142857142857143,
'WReNK+sNICx6cOItl+AeUw==':0.0714285714285714,
'wXaZCM/DrxO/8EsPvmITIg==':0.173333333333333,
'WYEA3UlgzttqI9iaGA5Kjw==':0.157894736842105,
'x0KGDyHi4nXvY76G2LpP9w==':0.191489361702128,
'x40fAoxA3Sez4SgiehMCOg==':0.7,
'X43JIqIVAmTH4IfLh4t92Q==':0.181818181818182,
'x4ktQLbyCxrQAk23EuT/iw==':0,
'x5kBDICFmcIF0+YeiaW07Q==':0.126153846153846,
'X6wZ1SEAbJMVR2Ot51GO+A==':0.25,
'XABLiX1bjW11Jcpu++YtBA==':0.142857142857143,
'xd1JtNMsqP3HbDK06tVPRg==':0.145454545454545,
'XfeY5kcjhuVGNOeTjEOqsg==':0.222222222222222,
'XFXLdGxH5BUgIhgQtkkNcw==':0.2,
'xg6PtkRBkGN5g9Rhz7X2jQ==':0.0909090909090909,
'xj3/s44VXOEMpRvCwWmrPw==':1,
'XjbxVy9K4ASj0GCQFUOZHQ==':0.172727272727273,
'xK5t+dx2oaTZPtEWWpUN3A==':0.2,
'xKFbYDl5iprg13oyD/ZSUA==':0.201550387596899,
'XMlo1/w/vGUTn0d5pIkpKg==':0.206896551724138,
'xN0yXDVVGvOxRtfHKuIK0w==':0.194444444444444,
'xNI1yixwgBnEoj3u+7DAxg==':0.151515151515152,
'xnuXa34DGib1kjeDWfM1zQ==':0.125,
'Xo9/CjsnRTAYkCLF/MwZkQ==':0.125,
'XOgzEiLGgtVJeweyWXIr8Q==':0.185185185185185,
'xr9L+yy1j5/LUVug+oWzpA==':0.166666666666667,
'XRrLMyJkhbJzZKNbGIxegQ==':0.0434782608695652,
'xs9CReVBPjFVen9YBttzIg==':0.206896551724138,
'xTnk5S8bnEDPyrRSDSiwBw==':0.285714285714286,
'xTrDMEf/Cnewxc1LO+pfbg==':0.165354330708661,
'xVb5SCSSvz9md0hLb9qnfw==':0.206896551724138,
'y/oABkU+Rt/Xyjm21VcTJw==':0,
'Y078tpHI68Ts9qO7YAfEmA==':0.111111111111111,
'Y7difNqumkMp0BUBa2YoGA==':0.115384615384615,
'y8mO6I+b76qxhVvXz3qHNQ==':0.0540540540540541,
'y93bUfHDZZYPJqTU56koLg==':0.0892857142857143,
'YA0xaBEZG4n6CnDMX82V+w==':0.237113402061856,
'YaFAN7XRGlpetr3+c8lVKg==':0.133333333333333,
'yAKXU/TJjtALzv8MDO4XnQ==':0,
'yBbyJWz3/Znd/0csjytlJg==':0.0416666666666667,
'YECaNvkVhlyYVnaNM9vakQ==':0.217391304347826,
'yEFu/7Nbau9SVX8b8Xmh4A==':0.245283018867925,
'YEud6VfiKS1JYsIeAiCz9g==':0.107142857142857,
'yeVqYu73N8BxJs0bvx2Yjg==':0.0357142857142857,
'yfdpLMr5IFGS1UZ79SoaGw==':0.137931034482759,
'yG8LLhXdcHyDK4StH4tkTQ==':0.157894736842105,
'yH2+mfXTBtCiDl++uxdDVw==':0.181818181818182,
'yl2Wj/XOlf5RyoX0YtxjIQ==':0,
'yLT/ZJF0ZbleG/BVYQ6e7Q==':0.111111111111111,
'ynV8NXlR70Q0trjRCFC+xg==':0.2,
'YoDhXGId/nnmdaO5CE40FQ==':0.168269230769231,
'yp7UBJNB9A8KC1HFQ5lnyw==':0.132450331125828,
'YPqoNiQxJ//GofrjksUpyQ==':0.111111111111111,
'YQ3OwMpijG3OEUh/CyILXw==':0,
'yTJHYEdVJMtsyWmwTdYwRg==':0.171232876712329,
'ytLyPMqmHHBSQt/em93iHw==':0.125,
'yW0UqMTzXqEHkfKNo/1TTw==':1,
'Yw3BAzWkY7V/IB51TiOgQw==':0.15625,
'yxn8j0z88w6KeFI+EwuUbA==':0.12,
'yyri/sKKaq4sgDa9+ssQaw==':0.184210526315789,
'yZ8uj246qxYw5rNLrp+n3g==':0.08,
'yZNlh0TN03uKx5gMqQcEZA==':0.152777777777778,
'Z/JnZFQJm2Tf1fEMMO6VPw==':0.133333333333333,
'z61ternSVugdYcUtx+e1gQ==':0.142512077294686,
'Z75kQrzNDuNXrcV8bwWpJA==':0.159090909090909,
'z7w/qM4ebHTAlQSGcMs35A==':0.296296296296296,
'zHpdl6Tev5lUbRlKCYN03A==':0.2,
'zI4iSZQYVOkeJoyLr2m2YA==':0.125,
'ZNZGyf3T/ZNBJYhwuwmBaA==':0.260869565217391,
'ZOspmQ1ZqC0FSMvxm2UCwQ==':0.191780821917808,
'ZpKFqBu49+Kr7tS4ugWh0g==':0.152542372881356,
'ZQA2YWXrNEIFPyzSjQx26Q==':0.0875,
'zQJ6Y7A4GmU0BHrQEGG6Zw==':0.130841121495327,
'ZRrjeS+d86hQCZsnJy9+lA==':0.222222222222222,
'ZS/k56NnsgRW0k+juSdGnw==':0.238095238095238,
'zSRzBHDXtsvaygYoS8s6cA==':0.272727272727273,
'ztibmi4GKIIgi4sFXZiqBA==':0.181818181818182,
'Zv/vxpTXPO6VX9g7E3Bz6Q==':0.0769230769230769,
'zWT0WAK9CWdutOFRORhvcQ==':0.115384615384615,
'zZR6+WTwMynQnPPgtq3mmw==':0.285714285714286
}

for dataset in p_train_test_list:
    dataset['zip'] = dataset['zip'].map(zip_mapping)
   # dataset['zip'] = dataset['zip'].fillna(0)
    
    
    
real_state_mapping = {'+qWF9pJpVGtTFn4vFjb/cg==':0.0833333333333333,
'n+xK9CfX0bCn77lClTWviw==':0.171796594096962,
'N5/CE7lSkAfB04hVFFwllw==':0.14723017342987,
'nSpvDsIsslUaX6GE6m6eQA==':0.15846436593833,
'UX7AdFYgQh+VrVC5eIaU9w==':0.245283018867925
}

for dataset in p_train_test_list:
    dataset['real_state'] = dataset['real_state'].map(real_state_mapping)
   # dataset['real_state'] = dataset['real_state'].fillna(0)    
    
    
 
channel_mapping = {'NCqL3QBx0pscDnx3ixKwXg==':0.158589867591635}  
  
for dataset in p_train_test_list:
    dataset['channel'] = dataset['channel'].map(real_state_mapping)
    #dataset['channel'] = dataset['channel'].fillna(0)   
    
p_train.isna().sum()/p_train.shape[0] #remove channel and facebook_profile


p_train_1 = p_train_test_list[0]
p_test_1 = p_train_test_list[1]

p_data_1 = pd.concat([p_train_1, p_test_1])

#checking for missing value
p_data_1['score_3'].isnull().values.any() # True
p_data_1['score_4'].isnull().values.any()  # False
p_data_1['score_5'].isnull().values.any()  #False
p_data_1['score_6'].isnull().values.any()  #False
p_data_1['risk_rate'].isnull().values.any() #true
p_data_1['amount_borrowed'].isnull().values.any()  #true
p_data_1['borrowed_in_months'].isnull().values.any() #true
p_data_1['credit_limit'].isnull().values.any()  #true
p_data_1['income'].isnull().values.any() #true
p_data_1['last_payment_derived'].isnull().values.any() #true
p_data_1['end_last_loan_derived'].isnull().values.any() #true
p_data_1['ok_since'].isnull().values.any()#true
p_data_1['n_bankruptcies'].isnull().values.any() #true
p_data_1['n_defaulted_loans'].isnull().values.any() #true
p_data_1['n_accounts'].isnull().values.any() #true
p_data_1['n_issues'].isnull().values.any() #true
p_data_1['score_1'].isnull().values.any() # False
p_data_1['score_2'].isnull().values.any() # False
p_data_1['sign'].isnull().values.any() # False
p_data_1['gender'].isnull().values.any() # False
p_data_1['state'].isnull().values.any() # False
p_data_1['zip'].isnull().values.any() # False
p_data_1['real_state'].isnull().values.any() # False

#missing value treatment
p_data_1['score_1']=p_data_1['score_1'].fillna(p_data_1['score_1'].median())
p_data_1['score_2']=p_data_1['score_2'].fillna(p_data_1['score_2'].median())
p_data_1['score_3']=p_data_1['score_3'].fillna(p_data_1['score_3'].median())
p_data_1['sign']=p_data_1['sign'].fillna(p_data_1['sign'].median())
p_data_1['gender']=p_data_1['gender'].fillna(p_data_1['gender'].median())
p_data_1['state']=p_data_1['state'].fillna(p_data_1['state'].median())
p_data_1['zip']=p_data_1['zip'].fillna(p_data_1['zip'].median())
p_data_1['real_state']=p_data_1['real_state'].fillna(p_data_1['real_state'].median())
p_data_1['risk_rate']=p_data_1['risk_rate'].fillna(p_data_1['risk_rate'].median())
p_data_1['amount_borrowed']=p_data_1['amount_borrowed'].fillna(p_data_1['amount_borrowed'].median())
p_data_1['borrowed_in_months']=p_data_1['borrowed_in_months'].fillna(p_data_1['borrowed_in_months'].median())
p_data_1['credit_limit']=p_data_1['credit_limit'].fillna(p_data_1['credit_limit'].median())
p_data_1['last_payment_derived']=p_data_1['last_payment_derived'].fillna(p_data_1['last_payment_derived'].median())
p_data_1['end_last_loan_derived']=p_data_1['end_last_loan_derived'].fillna(p_data_1['end_last_loan_derived'].median())
p_data_1['ok_since']=p_data_1['ok_since'].fillna(p_data_1['ok_since'].median())
p_data_1['n_bankruptcies']=p_data_1['n_bankruptcies'].fillna(p_data_1['n_bankruptcies'].median())
p_data_1['n_defaulted_loans']=p_data_1['n_defaulted_loans'].fillna(p_data_1['n_defaulted_loans'].median())
p_data_1['n_accounts']=p_data_1['n_accounts'].fillna(p_data_1['n_accounts'].median())
p_data_1['n_issues']=p_data_1['n_issues'].fillna(p_data_1['n_issues'].median())
p_data_1['income']=p_data_1['income'].fillna(p_data_1['income'].median())
p_data_1['channel']=p_data_1['channel'].fillna(p_data_1['channel'].median())

#p_train.isnull().values.any()
#-------------------------ipython_1-------excluding fb_mapping  ------------------------------
p_data_2 = p_data_1 #--------------------------------------------------------------


# outlier treatment for numerical variables
score1 = p_data_2['score_1'].values  #series to array 
p1_score1 = np.percentile(score1, 2) #percentile values
p2_score1 = np.percentile(score1, 98) #0.057,0.392

score2 =p_data_2['score_2'].values
p1_score2 = np.percentile(score2, 2) 
p2_score2 = np.percentile(score2, 98) # 0.029, 0.387

score3 = p_data_2['score_3'].values
p1_score3 = np.percentile(score3, 2) 
p2_score3 = np.percentile(score3, 98) #140, 590

score4 = p_data_2['score_4'].values
p1_score4 = np.percentile(score4, 2) 
p2_score4 = np.percentile(score4, 98) # 93.464, 106.488

score5 = p_data_2['score_5'].values
p1_score5 = np.percentile(score5, 2) 
p2_score5 = np.percentile(score5, 98) # 0.0199, 0.980

score6 = p_data_2['score_6'].values
p1_score6 = np.percentile(score6, 2) 
p2_score6 = np.percentile(score6, 98) # 79.260, 120.568

risk_rate = p_data_2['risk_rate'].values
p1_risk_rate = np.percentile(risk_rate, 2) 
p2_risk_rate = np.percentile(risk_rate, 98) #0.12, 0.53

amount_borrowed = p_data_2['amount_borrowed'].values
p1_amount_borrowed = np.percentile(amount_borrowed, 2) # 2033.944, 35017.89
p2_amount_borrowed = np.percentile(amount_borrowed, 98)

borrowed_in_months = p_data_2['borrowed_in_months'].values
p1_borrowed_in_months = np.percentile(borrowed_in_months, 2) 
p2_borrowed_in_months = np.percentile(borrowed_in_months, 98) #36,60

credit_limit = p_data_2['credit_limit'].values
p1_credit_limit = np.percentile(credit_limit, 2) 
p2_credit_limit = np.percentile(credit_limit, 98) #0, 123547.060

income = p_data_2['income'].values
p1_income = np.percentile(income, 2) 
p2_income = np.percentile(income, 98) #21855.664, 187024.687

sign = p_data_2['sign'].values
p1_sign = np.percentile(sign, 2) 
p2_sign = np.percentile(sign, 98) #0.0, 0.646

gender = p_data_2['gender'].values
p1_gender = np.percentile(gender, 2) 
p2_gender = np.percentile(gender, 98) #0, 0.18665 , not required

import datetime as dt
p_data_2['last_payment_derived'] = p_data_2['last_payment_derived'].dt.days
p_data_2['last_payment_derived'].dtypes

last_payment_derived = p_data_2['last_payment_derived'].values
p1_last_payment_derived = np.percentile(last_payment_derived, 2) 
p2_last_payment_derived = np.percentile(last_payment_derived, 98) #0,2100

p_data_2['end_last_loan_derived'] = p_data_2['end_last_loan_derived'].dt.days
p_data_2['end_last_loan_derived'].dtypes

end_last_loan_derived = p_data_2['end_last_loan_derived'].values
p1_end_last_loan_derived  = np.percentile(end_last_loan_derived, 2) 
p2_end_last_loan_derived  = np.percentile(end_last_loan_derived, 98) #0,1673

state= p_data_2['state'].values
p1_state = np.percentile(state, 2) 
p2_state = np.percentile(state, 98) # 0.113, 0.198

zip1= p_data_2['zip'].values
p1_zip1 = np.percentile(zip1, 2) 
p2_zip1 = np.percentile(zip1, 98) #0, 0.2777

real_state = p_data_2['real_state'].values
p1_real_state = np.percentile(real_state, 2) 
p2_real_state = np.percentile(real_state, 98) #0.147, 0.172

ok_since = p_data_2['ok_since'].values
p1_ok_since = np.percentile(ok_since, 2) 
p2_ok_since = np.percentile(ok_since, 98) # 6, 75

n_bankruptcies =p_data_2['n_bankruptcies'].values
p1_n_bankruptcies = np.percentile(n_bankruptcies, 2) 
p2_n_bankruptcies = np.percentile(n_bankruptcies, 98) #no need check prop of 0 and 1

n_defaulted_loans = p_data_2['n_defaulted_loans'].values
p1_n_defaulted_loans = np.percentile(n_defaulted_loans, 2) 
p2_n_defaulted_loans = np.percentile(n_defaulted_loans, 98) #no need, drop the col

n_accounts = p_data_2['n_accounts'].values 
p1_n_accounts = np.percentile(n_accounts, 2) 
p2_n_accounts = np.percentile(n_accounts, 98) #4, 22

n_issues = p_data_2['n_issues'].values
p1_n_issues = np.percentile(n_issues, 2) 
p2_n_issues = np.percentile(n_issues, 98) #4, 22

# clubbing outliers
# first split data_2 into two adat frames (train and test changed)
tr = pd.DataFrame()
te = pd.DataFrame()

if p_data_2.shape[0] > 64592: # len(df) > 10 would also work
    tr = p_data_2[:64592]
    te = p_data_2[64592:]
    
p_train_2 = tr
p_test_2 = te

p_train_test_list_2 = [p_train_2, p_test_2]

for dataset1 in p_train_test_list_2:
    dataset1.loc[dataset1.score_1 < 0.057, 'score_1' ] = 0.057
    dataset1.loc[dataset1.score_1 > 0.392, 'score_1' ] = 0.392
    
    dataset1.loc[dataset1.score_2 < 0.029, 'score_2' ] = 0.029
    dataset1.loc[dataset1.score_2 > 0.387, 'score_2' ] = 0.387
    
    dataset1.loc[dataset1.score_3 < 140, 'score_3' ] = 140
    dataset1.loc[dataset1.score_3 > 590, 'score_3' ] = 590
    
    dataset1.loc[dataset1.score_4 < 93.464, 'score_4' ] = 93.464
    dataset1.loc[dataset1.score_4 > 106.488, 'score_4' ] = 106.488
    
    dataset1.loc[dataset1.score_5 < 0.0199, 'score_5' ] =  0.0199
    dataset1.loc[dataset1.score_5 > 0.980, 'score_5' ] = 0.980
    
    dataset1.loc[dataset1.score_6 < 79.260, 'score_6' ] = 79.260
    dataset1.loc[dataset1.score_6 > 120.568, 'score_6' ] = 120.568
    
    dataset1.loc[dataset1.risk_rate < 0.12 , 'risk_rate' ] = 0.12 
    dataset1.loc[dataset1.risk_rate > 0.53, 'risk_rate' ] = 0.53
    
    dataset1.loc[dataset1.amount_borrowed< 2033.944 , 'amount_borrowed' ] = 2033.944 
    dataset1.loc[dataset1.amount_borrowed > 35017.89, 'amount_borrowed' ] = 35017.89
    
    dataset1.loc[dataset1.borrowed_in_months < 36, 'borrowed_in_months' ] = 36
    dataset1.loc[dataset1.borrowed_in_months > 60, 'borrowed_in_months' ] = 60
    
    dataset1.loc[dataset1.income < 21855.664, 'income' ] = 21855.664
    dataset1.loc[dataset1.income > 187024.687, 'income' ] = 187024.687
    
    dataset1.loc[dataset1.state < 0.113, 'state' ] = 0.113
    dataset1.loc[dataset1.state > 0.198, 'state' ] = 0.198
    
    dataset1.loc[dataset1.real_state < 0.147, 'real_state' ] = 0.147 
    dataset1.loc[dataset1.real_state > 0.172, 'real_state' ] = 0.172
    
    dataset1.loc[dataset1.ok_since < 6, 'ok_since' ] = 6
    dataset1.loc[dataset1.ok_since > 75, 'ok_since' ] = 75
    
    dataset1.loc[dataset1.n_accounts < 4, 'n_accounts' ] = 4
    dataset1.loc[dataset1.n_accounts > 22, 'n_accounts' ] = 22
    
    dataset1.loc[dataset1.n_issues < 4, 'n_issues' ] = 4
    dataset1.loc[dataset1.n_issues > 22, 'n_issues' ] = 22
   
    # for p1 = 0 variables
    dataset1.loc[dataset1.credit_limit > 123547.060, 'credit_limit' ] = 123547.060
    dataset1.loc[dataset1.sign > 0.646, 'sign' ] = 0.646
    dataset1.loc[dataset1.gender > 0.18665, 'gender' ] = 0.18665
    dataset1.loc[dataset1.last_payment_derived > 2100, 'last_payment_derived' ] = 2100
    dataset1.loc[dataset1.end_last_loan_derived > 1673, 'end_last_loan_derived' ] = 1673
    dataset1.loc[dataset1.zip > 0.2777, 'zip' ] = 0.2777
    
# saved
    
import matplotlib.pyplot as plt
plt.scatter(p_train_2['n_issues'], p_train_2['score_1'], marker='o');   

from sklearn.decomposition import PCA

features = ['score_1',
'score_3',
'score_4',
'score_5',
'score_6',
'risk_rate',
'amount_borrowed',
'borrowed_in_months',
'income',
'gender',
'last_payment_derived',
'end_last_loan_derived',
'state',
'zip',
'real_state',
'n_bankruptcies',
'n_defaulted_loans',
'n_accounts',
'n_issues'
]

p_data_3 = pd.concat([p_train_2, p_test_2])
# Separating out the features
x= p_data_3.loc[:, features].values


from sklearn.decomposition import PCA
pca = PCA(n_components=3)
principalComponents = pca.fit_transform(x)
principalDf = pd.DataFrame(data = principalComponents
             , columns = ['pc1', 'pc2', 'pc3'])

print(pca.explained_variance_)
print(pca.explained_variance_ratio_)
print (pca.explained_variance_ratio_.cumsum())


tr_Df = pd.DataFrame()
te_Df = pd.DataFrame()

if principalDf.shape[0] > 64592: # len(df) > 10 would also work
    tr_Df = principalDf[:64592]
    te_Df = principalDf[64592:]
    
train_principalDf = tr_Df
test_principalDf = te_Df  # final transformed test data set

from sklearn.model_selection import train_test_split
#Join 'default' in to the train_pDf dataframe
train_principalDf_xy = pd.concat([train_principalDf, p_train_original[['default']]], axis = 1) 

train_principalDf_xy_1 = train_principalDf_xy

#change default to 0 and 1
# train_principalDf_xy_1['default'].map({'FALSE': 0, 'TRUE': 1}).astype(int)
# train_principalDf_xy_1['default'] = train_principalDf_xy_1['default'].fillna(0).astype(int)

train_principalDf_xy_1['default'] = train_principalDf_xy_1['default'].fillna(False)
train_principalDf_xy_1['default'].map({False: 0, True: 1}).astype(int)

#train_principal_DF_xy_1 is the final transformed train data set

X = train_principalDf_xy_1[['pc1', 'pc2', 'pc3']] #, 'pc4', 'pc5', 'pc6', 'pc7', 'pc8', 'pc9', 'pc10']].values
Y = train_principalDf_xy_1['default'].values #cause sklearn takes in array not datafarme


Xtrain, Xtest, Ytrain, Ytest = train_test_split(X,Y,test_size = 0.30, random_state = 0)
Xtrain.shape, Xtest.shape, Ytrain.shape, Ytest.shape

##---------------------------------------------------------------------- ##Show off


from imblearn.over_sampling import SMOTE
print("Before OverSampling, counts of label '1': {}".format(sum(Ytrain==1)))
print("Before OverSampling, counts of label '0': {} \n".format(sum(Ytrain==0)))

sm = SMOTE(random_state=2)
Xtrain_res, Ytrain_res = sm.fit_sample(Xtrain, Ytrain.ravel())

print('After OverSampling, the shape of train_X: {}'.format(Xtrain_res.shape))
print('After OverSampling, the shape of train_y: {} \n'.format(Ytrain_res.shape))

print("After OverSampling, counts of label '1': {}".format(sum(Ytrain_res==1)))
print("After OverSampling, counts of label '0': {}".format(sum(Ytrain_res==0)))


##-----------------------------------LG-------------------------------------------


from sklearn.linear_model import LogisticRegression
LG = LogisticRegression(solver = 'lbfgs')

LG.fit(Xtrain, Ytrain)
LG.score(Xtrain, Ytrain)

LG.score(Xtest, Ytest)  #0.856

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score 
from sklearn.metrics import confusion_matrix, precision_recall_curve, roc_curve, auc, log_loss


# check classification scores of logistic regression
logreg = LogisticRegression()
logreg.fit(Xtrain, Ytrain)
logreg.score(Xtrain, Ytrain)
y_pred = logreg.predict(Xtest)
y_pred_proba = logreg.predict_proba(Xtest)[:, 1]
[fpr, tpr, thr] = roc_curve(Ytest, y_pred_proba)
print('Train/Test split results:')
print(logreg.__class__.__name__+" accuracy is %2.3f" % accuracy_score(Ytest, y_pred))
print(logreg.__class__.__name__+" log_loss is %2.3f" % log_loss(Ytest, y_pred_proba))
print(logreg.__class__.__name__+" auc is %2.3f" % auc(fpr, tpr))

idx = np.min(np.where(tpr > 0.95)) # index of the first threshold for which the sensibility > 0.95

plt.figure()
plt.plot(fpr, tpr, color='coral', label='ROC curve (area = %0.3f)' % 0.727)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot([0,fpr[idx]], [tpr[idx],tpr[idx]], 'k--', color='blue')
plt.plot([fpr[idx],fpr[idx]], [0,tpr[idx]], 'k--', color='blue')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('FPR', fontsize=14)
plt.ylabel('TPR', fontsize=14)
plt.title('ROC curve')
plt.legend(loc="lower right")
plt.show()

print("Using a threshold of %.3f " % thr[idx] + "guarantees a sensitivity of %.3f " % tpr[idx] +  
      "and a specificity of %.3f" % (1-fpr[idx]) + 
      ", i.e. a false positive rate of %.2f%%." % (np.array(fpr[idx])*100))

##------------------------------------------------------------------------------------


Y_pred_test = LG.predict(test_principalDf)

#p_train.groupby(['default']).count()


prob_LG = LG.predict_proba(test_principalDf)
LG.predict_proba(test_principalDf).shape

type(LG.predict_proba(test_principalDf))
print(LG.intercept_)
print(LG.coef_)

prob_LG_ = LG.predict_proba(test_principalDf)[:,1]
prob_LG_tr = LG.predict_proba(train_principalDf)[:,1]

#tweaking
LG2 = LogisticRegression()

#gridsearch
def GridSearch_BestParam(X,y,clf,param_grid,cv=10):
    grid_search = GridSearchCV(clf, param_grid = param_grid, cv = cv)
    start = time()
    grid_search.fit(X,y)
    top_params = grid_search.best_params_
    return top_params


param_grid = {"C":[0.001, 0.05, 0.1], 'solver':['newton-cg', 'lbfgs', 'liblinear']} #if you use solver don't give penalty

from sklearn.model_selection import GridSearchCV
from time import time
from operator import itemgetter
top_para = GridSearch_BestParam(Xtrain, Ytrain, LG2, param_grid, cv =10)
print(top_para)

# top_score = sorted(top_para,key = itemgetter(1), reverse = True)
# top_score

LG3 = LogisticRegression(C = 0.1, solver='liblinear')
LG3.fit(Xtrain, Ytrain)
LG3.score(Xtrain, Ytrain)
LG3.score(Xtest, Ytest)

Y_pred3 = LG3.predict(test_principalDf)

print(LG3.intercept_)
print(LG3.coef_)

##--------------------------RF--------------------------------
from sklearn.ensemble import RandomForestClassifier
RF = RandomForestClassifier(random_state = 1234, n_jobs = 1)

RF.fit(Xtrain, Ytrain)
RF.score(Xtrain, Ytrain)
RF.score(Xtest, Ytest)

#param_grid = {"criterion":["gini","entropy"],
#             "max_features":[3,4],
#              "max_depth":[3,4,5,7],
#             "n_estimators":[300,200,400,100]}

RF1 = RandomForestClassifier(criterion = 'entropy', n_estimators = 400,max_depth = 7, n_jobs = 1)
RF1.fit(Xtrain, Ytrain)
RF1.score(Xtrain, Ytrain)
RF1.score(Xtest, Ytest)  #best model 0.852, 0.856
Y_pred_RF1 = RF1.predict(test_principalDf)

RF2 = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',
            max_depth=5, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=1,
            oob_score=False, random_state=None, verbose=0,
            warm_start=False)

RF2.fit(Xtrain, Ytrain)
RF2.score(Xtrain, Ytrain)
RF2.score(Xtest, Ytest)  #0.851, 0.856

##----------------------------------------------------------------------------------
from sklearn.ensemble import RandomForestClassifier
RF3 = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',
            max_depth=None, max_features='auto', max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,
            oob_score=False, random_state=1234, verbose=0,
            warm_start=False)

RF3.fit(Xtrain, Ytrain)
RF3.score(Xtrain, Ytrain)
RF3.score(Xtest, Ytest)  #diff is high between train and test 0.978, 0.86

y_predRF = RF3.predict(Xtest)
y_pred_probaRF = RF3.predict_proba(Xtest)[:, 1]
[fpr, tpr, thr] = roc_curve(Ytest, y_pred_probaRF)
print('Train/Test split results:')
print(RF3.__class__.__name__+" accuracy is %2.3f" % accuracy_score(Ytest, y_predRF))
print(RF3.__class__.__name__+" log_loss is %2.3f" % log_loss(Ytest, y_pred_probaRF))
print(RF3.__class__.__name__+" auc is %2.3f" % auc(fpr, tpr))

idx = np.min(np.where(tpr > 0.95)) # index of the first threshold for which the sensibility > 0.95
#auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, color='coral', label='ROC curve (area = %0.3f)' % 0.747)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot([0,fpr[idx]], [tpr[idx],tpr[idx]], 'k--', color='blue')
plt.plot([fpr[idx],fpr[idx]], [0,tpr[idx]], 'k--', color='blue')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('FPR', fontsize=14)
plt.ylabel('TPR', fontsize=14)
plt.title('ROC curve')
plt.legend(loc="lower right")
plt.show()

print("Using a threshold of %.3f " % thr[idx] + "guarantees a sensitivity of %.3f " % tpr[idx] +  
      "and a specificity of %.3f" % (1-fpr[idx]) + 
      ", i.e. a false positive rate of %.2f%%." % (np.array(fpr[idx])*100))




##------------------------------------------- XG BOOST------------------------
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.datasets import load_svmlight_files
from sklearn.metrics import accuracy_score
from xgboost.sklearn import XGBClassifier

params = {
    #'objective': 'binary:logistic',
    'max_depth': 3,
    'learning_rate': 1.0,
    'silent': 1.0,
    'n_estimators': 5
}

bst = XGBClassifier(**params).fit(Xtrain, Ytrain)
bst.score(Xtrain, Ytrain)
bst.score(Xtest, Ytest)  #score almost same as RF1 0.852, 0.856

y_pred_bst = bst.predict(Xtest)
y_pred_proba_bst = bst.predict_proba(Xtest)[:, 1]
[fpr, tpr, thr] = roc_curve(Ytest, y_pred_proba_bst)
print('Train/Test split results:')
print(bst.__class__.__name__+" accuracy is %2.3f" % accuracy_score(Ytest, y_pred_bst))
print(bst.__class__.__name__+" log_loss is %2.3f" % log_loss(Ytest, y_pred_proba_bst))
print(bst.__class__.__name__+" auc is %2.3f" % auc(fpr, tpr))

idx = np.min(np.where(tpr > 0.95)) # index of the first threshold for which the sensibility > 0.95

plt.figure()
plt.plot(fpr, tpr, color='coral', label='ROC curve (area = %0.3f)' % 0.796)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot([0,fpr[idx]], [tpr[idx],tpr[idx]], 'k--', color='blue')
plt.plot([fpr[idx],fpr[idx]], [0,tpr[idx]], 'k--', color='blue')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('FPR', fontsize=14)
plt.ylabel('TPR', fontsize=14)
plt.title('ROC curve')
plt.legend(loc="lower right")
plt.show()

print("Using a threshold of %.3f " % thr[idx] + "guarantees a sensitivity of %.3f " % tpr[idx] +  
      "and a specificity of %.3f" % (1-fpr[idx]) + 
      ", i.e. a false positive rate of %.2f%%." % (np.array(fpr[idx])*100))
##---------------------------------------------------------------------



# specify general training parameters
params = {
    #'objective':'binary:logistic',
    'max_depth':[2,3,4,5],
    'learning_rate': [0.05,0.5,0.7,0.85,1.0],
    'silent':[1.0],
    'n_estimators': [3,4,5]
}


bst_ = XGBClassifier()
top_para = GridSearch_BestParam(Xtrain,Ytrain,bst_,params,cv=10)
print(top_para)
top_score = sorted(top_para,key = itemgetter(1), reverse = True)
top_score

bst1 = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, gamma=0, learning_rate=0.7, max_delta_step=0,
       max_depth=4, min_child_weight=1, missing=None, n_estimators=3,
       n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,
       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
       silent=1.0, subsample=1)

bst1.fit(Xtrain, Ytrain)
bst1.score(Xtrain, Ytrain)
bst1.score(Xtest, Ytest) #same as before

Y_pred_bst = bst1.predict(test_principalDf)  #use bst or bst1 #CAN'T PREDICT

#--------------------------------------------------------------------------------
    
p_big['pf_factor'] = p_big['spends']*0.05+p_big['revolving_balance']*0.17-p_big['card_request']*10-p_big['minutes_cs']*2.5-p_big['month']*(1-0.005)

x1=p_big[['pf_factor', 'ids']].groupby(['ids'], sort=False, as_index = False).sum()


import matplotlib.pyplot as plt
#The amount of variance that each PC explains
var= pca.explained_variance_ratio_
#Cumulative Variance explains
var1=np.cumsum(np.round(pca.explained_variance_ratio_, decimals=4)*100)
print(var1)
plt.plot(var1)
plt.show()

